{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THE_COLORS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBase64TokenSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "colorTokenIds",
          "type": "uint16[]"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "colorTokenIds",
          "type": "uint16[]"
        }
      ],
      "name": "mintMany",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "colorTokenIds",
          "type": "uint16[]"
        }
      ],
      "name": "updateColors",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c45ecca7a34b26b56fbe7021d6f921aa7947ac3f8b795d48abc3f4f928b7011",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "5141744",
    "logsBloom": "0x
    "blockHash": "0x5eeb6a006a845a86c51feb2f6001709d5a806ae03587254fb5ec118638d4fd99",
    "transactionHash": "0x3c45ecca7a34b26b56fbe7021d6f921aa7947ac3f8b795d48abc3f4f928b7011",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0x3c45ecca7a34b26b56fbe7021d6f921aa7947ac3f8b795d48abc3f4f928b7011",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5eeb6a006a845a86c51feb2f6001709d5a806ae03587254fb5ec118638d4fd99"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "5141744",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "21b3f8cc9a43a371eed316846aa32524",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_TOKENS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THE_COLORS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getBase64TokenSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"colorTokenIds\",\"type\":\"uint16[]\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"colorTokenIds\",\"type\":\"uint16[]\"}],\"name\":\"mintMany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"colorTokenIds\",\"type\":\"uint16[]\"}],\"name\":\"updateColors\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extends ERC721 Non-Fungible Token Standard basic implementation\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Sync x Colors contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(uint16[])\":{\"notice\":\"Mint one SYNCxCOLOR NFT\"},\"mintMany(uint256,uint16[])\":{\"notice\":\"Mint multiple SYNCxCOLOR NFTs\"},\"updateColors(uint256,uint16[])\":{\"notice\":\"Store mapping between tokenId and applied tokenIdColors\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SyncXColors.sol\":\"Sync\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa1b27b3f44ff825974e5268e8f63ad3b03add5b464880d860fbb8cae043e17f7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x6881efb8fa7b41a7a7c2e6e5b31f0f19d0735a6485f2912f8db5802546aeaf16\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x86ebc6cea2b539c2d4a79a4754f7c90c43c45c9aaf0aab32ecffb1565afc5e0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x1ba5cf152c15dc0c785310feeb61e1f74387fc7bdc2aba5d90733f791606d4bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x872ba21af7c1f0ae04a715beca31e8fcac764d6c8762940b0fe1bfb6ed8e86f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x483b106386dd309f168672928252a19f30c30efb4d17d4b8e2b0f587ca784a11\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x683793c78df81fc9033105d5c5e7173a3a295f94b55435129a385514213637e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x42c041cfe2fba75264baa64c4c3c55b128e6667b54331df87028cc4da0a9606e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6052c25b1021f2b0e733fb52ca11948cb2f08cb66076397507243a6e8a8d7776\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x7736c187e6f1358c1ea9350a2a21aa8528dec1c2f43b374a9067465a3a51f5d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x5fa25f305839292fab713256214f2868e0257d29826b14282bbd7f1e34f5af38\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x905cd0ecd91d1de79a4679d745b79cf852ca8ccda5d25d1c49c6bd17a5edc0cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6aa521718bf139b44ce56f194f6aea1d590cacef995b5a84703fb1579fa49be9\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/SyncXColors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport 'base64-sol/base64.sol';\\nimport './legacy_colors/TheColors.sol';\\nimport './legacy_colors/INFTOwner.sol';\\n\\n/**\\n * @title Sync x Colors contract\\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\\n */\\ncontract Sync is ERC721Enumerable, Ownable, ReentrancyGuard {\\n  using Strings for uint256;\\n  using Strings for uint16;\\n  using Strings for uint8;\\n\\n  uint256 public constant MAX_TOKENS = 3333;\\n\\n  // Declare Public\\n  uint256 private constant mintPrice = 0.04 ether; // Price per mint\\n  uint256 private constant resyncPrice = 0.005 ether; // Price per color resync\\n  uint256 private constant maxMintAmount = 10; // Max amount of mints per transaction\\n  address private constant TREASURY =\\n    address(0x48aE900E9Df45441B2001dB4dA92CE0E7C08c6d2);\\n  address public constant THE_COLORS =\\n    address(0x5FbDB2315678afecb367f032d93F642f64180aa3); //0x3C4CfA9540c7aeacBbB81532Eb99D5E870105CA9);\\n\\n  // Declare Private\\n  //bool internal _isPublicMintActive;\\n  mapping(uint256 => uint16[]) private _colorTokenIds;\\n  mapping(uint256 => uint256) private _seed;\\n\\n  struct SyncTraitsStruct {\\n    uint8[] shape_color;\\n    uint8[] shape_type;\\n    uint16[] shape_x;\\n    uint16[] shape_y;\\n    uint16[] shape_sizey;\\n    uint16[] shape_sizex;\\n    uint16[] shape_r;\\n    uint16 rarity_index;\\n  }\\n\\n  // Constructor\\n  constructor() ERC721('Sync x Colors', 'SYNC Beta') ReentrancyGuard() {}\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (string memory)\\n  {\\n    require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n\\n    SyncTraitsStruct memory syncTraits = generateTraits(tokenId);\\n\\n    string memory svgData = generateSVGImage(tokenId, syncTraits);\\n    string memory image = Base64.encode(bytes(svgData));\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{',\\n                '\\\"image\\\":\\\"',\\n                'data:image/svg+xml;base64,',\\n                image,\\n                '\\\",',\\n                generateNameDescription(tokenId),\\n                generateAttributes(tokenId, syncTraits),\\n                '}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function getTokenMetadata(uint256 tokenId)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n    \\n    SyncTraitsStruct memory syncTraits = generateTraits(tokenId);\\n    string memory image = Base64.encode(\\n      bytes(generateSVGImage(tokenId, syncTraits))\\n    );\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json',\\n          '{',\\n          '\\\"image\\\":\\\"',\\n          'data:image/svg+xml;base64,',\\n          image,\\n          '\\\",',\\n          generateNameDescription(tokenId),\\n          ',',\\n          generateAttributes(tokenId, syncTraits),\\n          '}'\\n        )\\n      );\\n  }\\n\\n\\n  function getTokenSVG(uint256 tokenId) external view returns (string memory) {\\n    require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n    \\n    SyncTraitsStruct memory syncTraits = generateTraits(tokenId);\\n\\n    return generateSVGImage(tokenId, syncTraits);\\n  }\\n\\n  function getBase64TokenSVG(uint256 tokenId)\\n    external\\n    view\\n    returns (string memory)\\n  {\\n    require(_exists(tokenId), 'ERC721: operator query for nonexistent token');\\n   \\n    SyncTraitsStruct memory syncTraits = generateTraits(tokenId);\\n    string memory image = Base64.encode(\\n      bytes(generateSVGImage(tokenId, syncTraits))\\n    );\\n    return string(abi.encodePacked('data:application/json;base64', image));\\n  }\\n\\n  function withdraw() external payable nonReentrant onlyOwner {\\n    uint256 balance = address(this).balance;\\n    uint256 for_treasury = (balance * 33) / 100; //33% 1 way\\n    uint256 for_r1 = (balance * 67) / (5 * 100); //67% 5 ways\\n    uint256 for_r2 = (balance * 67) / (5 * 100);\\n    uint256 for_r3 = (balance * 67) / (5 * 100);\\n    uint256 for_r4 = (balance * 67) / (5 * 100);\\n    uint256 for_r5 = (balance * 67) / (5 * 100);\\n    payable(TREASURY).transfer(for_treasury);\\n    //payable(0x).transfer(for_r1);\\n    //payable(0x).transfer(for_r2);\\n    //payable(0x).transfer(for_r3);\\n    //payable(0x).transfer(for_r4);\\n    //payable(0x).transfer(for_r5);\\n    balance = address(this).balance;\\n    payable(msg.sender).transfer(balance);\\n  }\\n\\n  /**\\n   * Mint multiple SYNCxCOLOR NFTs\\n   */\\n  function mintMany(uint256 _mintAmount, uint16[] calldata colorTokenIds)\\n    external\\n    payable\\n    nonReentrant\\n  {\\n    // Requires\\n    uint16 _mintIndex = uint16(totalSupply());\\n    require(_mintAmount <= maxMintAmount, 'Max mint 10 per tx');\\n    require(_mintAmount > 0, 'Mint should be > 0');\\n    require(_mintIndex + _mintAmount <= MAX_TOKENS, 'Exceeds supply');\\n    require(colorTokenIds.length <= 3, '# COLORS tokenIds must be <=3');\\n    require(msg.value >= (mintPrice * _mintAmount), 'Insufficient funds');\\n\\n    // Validate colorTokenIds\\n    require(checkHolder(colorTokenIds) == true, 'COLORS not owned by sender.');\\n\\n    for (uint256 i = _mintIndex; i < (_mintIndex + _mintAmount); i++) {\\n      // Update state\\n      _colorTokenIds[i] = colorTokenIds;\\n      _seed[i] = _rng(i);\\n      // Mint\\n      _mintOnce(i);\\n    }\\n  }\\n\\n  /**\\n   * Mint one SYNCxCOLOR NFT\\n   */\\n  function mint(uint16[] calldata colorTokenIds) external payable nonReentrant {\\n    // Requires\\n    uint256 mintIndex = totalSupply();\\n    require(mintIndex < MAX_TOKENS, 'Exceeds supply');\\n    require(colorTokenIds.length <= 3, '# COLORS tokenIds must be <=3');\\n    require(msg.value >= mintPrice, 'Insufficient funds');\\n\\n    // Validate colorTokenIds\\n    require(checkHolder(colorTokenIds) == true, 'COLORS not owned by sender.');\\n\\n    //Update states\\n    _colorTokenIds[mintIndex] = colorTokenIds;\\n    _seed[mintIndex] = _rng(mintIndex);\\n\\n    //Mint\\n    _mintOnce(mintIndex);\\n  }\\n\\n  /**\\n   * Mints once\\n   */\\n  function _mintOnce(uint256 mintIndex) internal {\\n    _safeMint(msg.sender, mintIndex);\\n  }\\n\\n  /**\\n   * Store mapping between tokenId and applied tokenIdColors\\n   */\\n  function updateColors(uint256 tokenId, uint16[] calldata colorTokenIds)\\n    external\\n    payable\\n  {\\n    require(msg.sender == ownerOf(tokenId), 'Only NFT holder can updateColors');\\n    require(colorTokenIds.length <= 3, '# COLORS tokenIds must be <=3');\\n    require(msg.value >= resyncPrice, 'Insufficient funds');\\n    // Validate colorTokenIds\\n    require(checkHolder(colorTokenIds) == true, 'COLORS not owned by sender.');\\n\\n    _colorTokenIds[tokenId] = colorTokenIds;\\n  }\\n\\n  /**\\n   * Verify that sender holds supplied colorTokenIds\\n   */\\n  function checkHolder(uint16[] calldata colorTokenIds)\\n    private\\n    view\\n    returns (bool)\\n  {\\n    address colors_address = THE_COLORS;\\n    for (uint256 i = 0; i < colorTokenIds.length; i++) {\\n      if (\\n        msg.sender !=\\n        INFTOwner(colors_address).ownerOf(uint256(colorTokenIds[i]))\\n      ) {\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n\\n  /**\\n   * Return NFT description\\n   */\\n  function generateNameDescription(uint256 tokenId)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\"external_url\\\":\\\"https://syncxcolors.xyz\\\",',\\n          unicode'\\\"description\\\":\\\"The SYNCxColors are generated and stored entirely on-chain, and may be linked with up to 3 THE COLORS primitives for epic effect.',\\n          '\\\\\\\\nToken id: #',\\n          tokenId.toString(),\\n          '\\\"'\\n        )\\n      );\\n  }\\n\\n  function getColorDescriptor(uint256 tokenId)\\n    private\\n    view\\n    returns (string memory)\\n  {\\n    uint16[] memory colorTokenIds = _colorTokenIds[tokenId];\\n    uint256 length = _colorTokenIds[tokenId].length;\\n    string memory colorDescriptor;\\n    for (uint256 i = 0; i < length; i++) {\\n      if (colorTokenIds[i] == 0) {\\n        break;\\n      }\\n      colorDescriptor = string(\\n        abi.encodePacked(\\n          colorDescriptor,\\n          TheColors(THE_COLORS).getHexColor(uint256(colorTokenIds[i])),\\n          ','\\n        )\\n      );\\n    }\\n    return colorDescriptor;\\n  }\\n  /**\\n   * Generate attributes json\\n   */\\n  function generateAttributes(\\n    uint256 tokenId,\\n    SyncTraitsStruct memory syncTraits\\n  ) internal view returns (string memory) {\\n    string memory rarity = 'Common';\\n    if (syncTraits.rarity_index >= 990) {\\n      rarity = 'Gold';\\n    } else if (syncTraits.rarity_index >= 950) {\\n      rarity = 'Silver';\\n    } else if (syncTraits.rarity_index >= 850) {\\n      rarity = 'Drift';\\n    }\\n\\n    bytes memory buffer = abi.encodePacked(\\n      '\\\"attributes\\\":[',\\n      '{\\\"trait_type\\\":\\\"Rarity\\\",\\\"value\\\":\\\"',\\n      rarity,\\n      '\\\"},',\\n      '{\\\"trait_type\\\":\\\"Colors\\\",\\\"value\\\":\\\"',\\n      getColorDescriptor(tokenId),\\n      '\\\"}]'\\n    );\\n    return string(abi.encodePacked(buffer));\\n  }\\n\\n  /**\\n   * Returns hex strings representing colorTokenIDs as an array\\n   */\\n  function getColorsHexStrings(uint256 tokenId)\\n    internal\\n    view\\n    returns (string[] memory)\\n  {\\n    uint16[] memory colorTokenIds = _colorTokenIds[tokenId];\\n    uint256 length = _colorTokenIds[tokenId].length;\\n    string[] memory hexColors = new string[](3);\\n    hexColors[0] = '#222222'; // Defaults (grayscale)\\n    hexColors[1] = '#777777';\\n    hexColors[2] = '#AAAAAA';\\n    for (uint256 i = 0; i < length; i++) {\\n      hexColors[i] = TheColors(THE_COLORS).getHexColor(\\n        uint256(colorTokenIds[i])\\n      );\\n    }\\n    return hexColors;\\n  }\\n\\n  /**\\n   * Generates the SVG\\n   */\\n  function generateSVGImage(\\n    uint256 tokenId,\\n    SyncTraitsStruct memory syncTraits\\n  ) private view returns (string memory) {\\n    string[] memory hexColors = getColorsHexStrings(tokenId);\\n    string[] memory bgColors = new string[](3);\\n    string[] memory inColors = new string[](3);\\n    string[] memory dColors = new string[](3);\\n    for (uint256 i = 0; i < 3; i++) {\\n      bgColors[i] = hexColors[i]; //copy values\\n      inColors[i] = hexColors[i];\\n      dColors[i] = 'white';\\n    }\\n    if (syncTraits.rarity_index >= 990) {\\n      bgColors[0] = '#CD7F32'; //Gold\\n      bgColors[1] = '#E5E4E2'; //Platinum\\n      bgColors[2] = '#725d18'; //Darker Gold\\n      inColors[0] = 'black';\\n      inColors[1] = '#C0C0C0'; //silver\\n      inColors[2] = '#E5E4E2';\\n    } else if (syncTraits.rarity_index >= 950) {\\n      bgColors[0] = '#c0c0c0'; //Silver\\n      bgColors[1] = '#e5e4e2'; //Platinum\\n      bgColors[2] = '#c0c0c0';\\n      inColors[0] = 'white';\\n      inColors[1] = '#C0C0C0'; //silver\\n      inColors[2] = '#CD7F32';\\n    } else if (syncTraits.rarity_index >= 850) {\\n      //Tokyo Drift\\n      dColors[0] = hexColors[0];\\n      dColors[1] = hexColors[1];\\n      dColors[2] = hexColors[2];\\n    }\\n\\n    bytes memory svgBG = generateSVGBG(bgColors, syncTraits);\\n    bytes memory svgInfinity = generateSVGInfinity(inColors);\\n    bytes memory svgLogo = generateSVGLogo(bgColors, syncTraits);\\n    bytes memory svgDrift = generateSVGDrift(dColors);\\n    return string(abi.encodePacked(\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" width=\\\"500\\\" height=\\\"500\\\" viewbox=\\\"0 0 500 500\\\" style=\\\"background-color:#111111\\\">',\\n        svgBG, svgInfinity, svgLogo, svgDrift));\\n  }\\n\\n  /**\\n   * Generates the SVG Background\\n   */\\n  function generateSVGBG(\\n    string[] memory bgColors,\\n    SyncTraitsStruct memory syncTraits\\n  ) private pure returns (bytes memory) {\\n    bytes memory svgBG = '<g fill-opacity=\\\"0.3\\\">';\\n    bytes memory newShape;\\n\\n    for (uint256 i = 0; i < 15; i++) {\\n      if (syncTraits.shape_type[i] == 0) {\\n        newShape = abi.encodePacked(\\n          '<circle fill=\\\"',\\n          bgColors[syncTraits.shape_color[i]],\\n          '\\\" cx=\\\"',\\n          syncTraits.shape_x[i].toString(),\\n          '\\\" cy=\\\"',\\n          syncTraits.shape_y[i].toString(),\\n          '\\\" r=\\\"',\\n          syncTraits.shape_sizex[i].toString(),\\n          '\\\"/>'\\n        );\\n      } else if (syncTraits.shape_type[i] == 1) {\\n        newShape = abi.encodePacked(\\n          '<rect fill=\\\"',\\n          bgColors[syncTraits.shape_color[i]],\\n          '\\\" x=\\\"',\\n          (syncTraits.shape_x[i] / 2).toString(),\\n          '\\\" y=\\\"',\\n          (syncTraits.shape_y[i] / 2).toString(),\\n          '\\\" width=\\\"',\\n          (syncTraits.shape_sizex[i] * 2).toString(),\\n          '\\\" height=\\\"',\\n          (syncTraits.shape_sizey[i] * 2).toString(),\\n          '\\\" transform=\\\"rotate(',\\n          syncTraits.shape_r[i].toString(),\\n          ')\\\"/>'\\n        );\\n      }\\n      svgBG = abi.encodePacked(svgBG, newShape);\\n    }\\n    return abi.encodePacked(svgBG, '</g>');\\n  }\\n\\n  /**\\n   * Generates the infinity\\n   */\\n  function generateSVGInfinity(string[] memory inColors)\\n    private\\n    pure\\n    returns (bytes memory)\\n  {\\n    bytes memory infinity1 = abi.encodePacked(\\n      '<g id=\\\"infinity_1\\\"><path id=\\\"infinity\\\" stroke-dasharray=\\\"0\\\" stroke-dashoffset=\\\"0\\\" stroke-width=\\\"16\\\" ',\\n      'd=\\\"M195.5 248c0 30 37.5 30 52.5 0s 52.5-30 52.5 0s-37.5 30-52.5 0s-52.5-30-52.5 0\\\" fill=\\\"none\\\">',\\n      '<animate begin=\\\"s.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke\\\"  values=\\\"',\\n      inColors[0],\\n      ';',\\n      inColors[1],\\n      ';',\\n      inColors[0],\\n      '\\\" dur=\\\"4s\\\" fill=\\\"freeze\\\"/>'\\n    );\\n    bytes memory infinity2 = abi.encodePacked(\\n      '<animate begin=\\\"s.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-dasharray\\\" values=\\\"0;50;0\\\" dur=\\\"6s\\\" fill=\\\"freeze\\\"/>',\\n      '<animate begin=\\\"a.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-width\\\" values=\\\"16;20;16\\\" dur=\\\"1s\\\" fill=\\\"freeze\\\"/>',\\n      '</path><path id=\\\"infinity_2\\\" stroke-dasharray=\\\"300\\\" stroke-dashoffset=\\\"300\\\" stroke=\\\"#FF1111\\\" stroke-width=\\\"16\\\" ',\\n      'd=\\\"M195.5 248c0 30 37.5 30 52.5 0s 52.5-30 52.5 0s-37.5 30-52.5 0s-52.5-30-52.5 0\\\" fill=\\\"none\\\">'\\n    );\\n    bytes memory infinity3 = abi.encodePacked(\\n      '<animate begin=\\\"s.end\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke\\\" values=\\\"',\\n      inColors[2],\\n      ';',\\n      inColors[0],\\n      ';',\\n      inColors[2],\\n      '\\\" dur=\\\"4s\\\" fill=\\\"freeze\\\"/>',\\n      '<animate id=\\\"a\\\" begin=\\\"s.begin;s.begin+1s;s.begin+2s;s.begin+3s;s.begin+4s;s.begin+5s;s.begin+6s\\\" ',\\n      'attributeType=\\\"XML\\\" attributeName=\\\"stroke-width\\\" values=\\\"16;20;16\\\" dur=\\\"1s\\\" fill=\\\"freeze\\\" />',\\n      '<animate id=\\\"s\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-dashoffset\\\" begin=\\\"0s;s.end\\\" to= \\\"-1800\\\" dur=\\\"6s\\\"  /></path></g>'\\n    );\\n    return abi.encodePacked(infinity1, infinity2, infinity3);\\n  }\\n\\n  /**\\n   * Generates the logo\\n   */\\n  function generateSVGLogo(\\n    string[] memory hexColors,\\n    SyncTraitsStruct memory syncTraits\\n  ) private pure returns (bytes memory) {\\n    bytes memory logo = abi.encodePacked(\\n      '<g id=\\\"b\\\">',\\n      '<path d=\\\"M144.4 89.31h-31.3c-16.88 32.57 0 71.38 0 71.38h31.3c-30.95-35 0-71.38 0-71.38Zm-13.17 ',\\n      '63.76h-11.65s-12.47-17.38 0-55.68h11.65s-20.8 25.18 0 55.68Z\\\" transform=\\\"matrix(2 0 0 2 -95 0)\\\" stroke=\\\"black\\\" fill-opacity=\\\"0.9\\\" ',\\n      'stroke-width=\\\".7\\\" stroke-dasharray=\\\"20\\\" stroke-dashoffset=\\\"10\\\">',\\n      '<animate id=\\\"p\\\" begin=\\\"s.begin+2s\\\" attributeName=\\\"fill\\\" values=\\\"black;',\\n      hexColors[0],\\n      ';black\\\" dur=\\\"2s\\\"/>',\\n      '<animate id=\\\"q\\\" begin=\\\"s.begin+4s\\\" attributeName=\\\"fill\\\" values=\\\"black;',\\n      hexColors[1],\\n      ';black\\\" dur=\\\"2s\\\" />',\\n      '<animate id=\\\"r\\\" begin=\\\"s.begin+6s\\\" attributeName=\\\"fill\\\" values=\\\"black;',\\n      hexColors[2],\\n      ';black\\\" dur=\\\"2s\\\" />'\\n    );\\n\\n    if (syncTraits.rarity_index >= 950) {\\n      logo = abi.encodePacked(\\n        logo,\\n        '<animate begin=\\\"p.begin;q.begin;r.begin\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke-dashoffset\\\" from=\\\"0\\\" to=\\\"230\\\" dur=\\\"1s\\\" fill=\\\"freeze\\\" />',\\n        '<animate begin=\\\"s.begin;s.end\\\" attributeType=\\\"XML\\\" attributeName=\\\"stroke\\\" values=\\\"',\\n        hexColors[0],\\n        ';',\\n        hexColors[1],\\n        ';',\\n        hexColors[2],\\n        ';',\\n        hexColors[0],\\n        '\\\" dur=\\\"6s\\\" fill=\\\"freeze\\\" />'\\n      );\\n    }\\n\\n    return logo;\\n  }\\n\\n  /**\\n   * Generates the drift\\n   */\\n  function generateSVGDrift(string[] memory dColors)\\n    private\\n    pure\\n    returns (bytes memory)\\n  {\\n    bytes memory borders1 = abi.encodePacked(\\n      '</path><path d=\\\"M107.3179 117.5457c-13.3985 25.8524 0 56.658 0 56.658 h 6.873c-0.1535-0.4067-9.7724-26.1184 .0305-56.2648z\\\" ',\\n      'transform=\\\"translate(-85,15) scale(1.6,1.6)\\\" stroke-opacity=\\\".7\\\" fill-opacity=\\\".7\\\" fill=\\\"transparent\\\">'\\n      '<animate id=\\\"w\\\" attributeName=\\\"fill\\\" values=\\\"transparent;',\\n      dColors[0],\\n      ';transparent\\\" begin=\\\"p.begin+.4s;q.begin+.4s;r.begin+.4s\\\" dur=\\\"1s\\\"/>',\\n      '<animate begin=\\\"w.begin\\\" attributeName=\\\"stroke\\\" values=\\\"transparent;black;transparent\\\" dur=\\\"1s\\\"/>',\\n      '</path>'\\n    );\\n\\n    bytes memory borders2 = abi.encodePacked(\\n      '<path ',\\n      'd=\\\"M 107.3179 117.5457c -13.3985 25.8524 0 56.658 0 56.658 h 6.873 c -0.1535 -0.4067 -9.7724 -26.1184 .0305 -56.2648 z\\\" ',\\n      'transform=\\\"translate(-88,60) scale(1.3,1.3)\\\" stroke-opacity=\\\".35\\\" fill-opacity=\\\".5\\\" fill=\\\"transparent\\\">',\\n      '<animate attributeName=\\\"fill\\\" values=\\\"transparent;',\\n      dColors[1],\\n      ';transparent\\\" begin=\\\"w.begin+.2s\\\" dur=\\\"1s\\\"/>',\\n      '<animate attributeName=\\\"stroke\\\" values=\\\"transparent;black;transparent\\\" begin=\\\"w.begin+.2s\\\" dur=\\\"1s\\\"/>',\\n      '</path>'\\n    );\\n\\n    bytes memory borders3 = abi.encodePacked(\\n      '<path ',\\n      'd=\\\"M107.3179 117.5457 c-13.3985 25.8524 0 56.658 0 56.658 h6.873 c-0.1535-0.4067-9.7724-26.1184 .0305-56.2648z\\\" ',\\n      'transform=\\\"translate(-82,104) scale(1,1)\\\" stroke-opacity=\\\".05\\\" fill-opacity=\\\"0.3\\\" fill=\\\"transparent\\\">',\\n      '<animate attributeName=\\\"fill\\\" values=\\\"transparent;',\\n      dColors[2],\\n      ';transparent\\\" begin=\\\"w.begin+.4s\\\" dur=\\\"1s\\\"/>',\\n      '<animate attributeName=\\\"stroke\\\" values=\\\"transparent;black;transparent\\\" begin=\\\"w.begin+.4s\\\" dur=\\\"1s\\\"/>',\\n      '</path></g><use href=\\\"#b\\\" x=\\\"-500\\\" y=\\\"-500\\\" transform=\\\"rotate(180)\\\"/></svg>'\\n    );\\n\\n    return abi.encodePacked(borders1, borders2, borders3);\\n  }\\n\\n  /**\\n   * Generates the NFT traits by stored seed (note: seed generated and stored at mint)\\n   */\\n  function generateTraits(uint256 tokenId)\\n    private\\n    view\\n    returns (SyncTraitsStruct memory)\\n  {\\n    SyncTraitsStruct memory syncTraits;\\n    uint256 seed = _seed[tokenId];\\n   \\n    syncTraits.shape_x = new uint16[](15);\\n    syncTraits.shape_y = new uint16[](15);\\n    syncTraits.shape_sizex = new uint16[](15);\\n    syncTraits.shape_sizey = new uint16[](15);\\n    syncTraits.shape_r = new uint16[](15);\\n    syncTraits.shape_type = new uint8[](15);\\n    syncTraits.shape_color = new uint8[](15);\\n\\n    syncTraits.rarity_index = uint16(\\n      1 + ((seed & 0x3FF0000000000000000000000000000) % 1000)\\n    );\\n    for (uint256 i = 0; i < 15; i++) {\\n      //Generate properties for 15 random shapes to form the background (squares/circles)\\n      syncTraits.shape_x[i] = uint16(1 + ((seed & 0x3FF) % 500));\\n      syncTraits.shape_y[i] = uint16(1 + (((seed & 0x3FF0000) / 2**4) % 500));\\n      syncTraits.shape_sizex[i] = uint16(250 + (((seed & 0x1FF00000000) / 2**5) % 151));\\n      syncTraits.shape_sizey[i] = uint16(\\n        250 + (((seed & 0x1FF000000000000) >> 48) % 151)\\n      );\\n      syncTraits.shape_r[i] = uint16(\\n        1 + (((seed & 0x1FF0000000000000000) / 2**6) % 360)\\n      );\\n      syncTraits.shape_type[i] = uint8(((seed & 0x1FF00000000000000000000) >> 80) % 2);\\n      syncTraits.shape_color[i] = uint8(\\n        ((seed & 0x1FF000000000000000000000000) >> 96) % 3\\n      );\\n      seed = seed >> 2;\\n    }\\n    return syncTraits;\\n  }\\n\\n  /**\\n   * Produce a PRNG uint256 as hash of several inputs\\n   */\\n  function _rng(uint256 tokenId) private view returns (uint256) {\\n    uint256 _tokenId = tokenId + 1;\\n    uint256 seed = uint256(uint160(THE_COLORS));\\n    return\\n      uint256(\\n        keccak256(\\n          abi.encodePacked(\\n            _tokenId.toString(),\\n            block.timestamp,\\n            block.difficulty,\\n            seed\\n          )\\n        )\\n      ) + uint256(_tokenId * seed);\\n  }\\n}\\n\",\"keccak256\":\"0x2317cc7b9cf4a57766ed994dd43a5779c8bc876d4e5616291c6b68ce84e94491\",\"license\":\"MIT\"},\"contracts/legacy_colors/INFTOwner.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface INFTOwner {\\n  function ownerOf(uint256 tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xcc4c42e4cf34f299cc9f88e5d838dce24c714759a1414082bebce32de76ec427\",\"license\":\"UNLICENSED\"},\"contracts/legacy_colors/TheColors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport 'base64-sol/base64.sol';\\nimport './INFTOwner.sol';\\nimport 'hardhat/console.sol';\\n\\n/**\\n * @title TheColors contract\\n * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\\n */\\ncontract TheColors is ERC721Enumerable, Ownable {\\n  using Strings for uint256;\\n  using Strings for uint32;\\n\\n  string public PROVENANCE_HASH = '';\\n\\n  /*address constant public THE_COLORS_LEGACY = address(0xc22f6c6f04c24Fac546A43Eb2E2eB10b1D2953DA);*/\\n\\n  uint256 public constant MAX_COLORS = 4317;\\n\\n  mapping(uint256 => uint32) private _hexColors;\\n  mapping(uint32 => bool) public existingHexColors;\\n\\n  constructor() ERC721('The Colors (thecolors.art)', 'COLORS') {}\\n\\n  function tokenURI(uint256 tokenId)\\n    public\\n    view\\n    virtual\\n    override(ERC721)\\n    returns (string memory)\\n  {\\n    require(\\n      _hexColors[tokenId] > 0,\\n      'ERC721Metadata: URI query for nonexistent token'\\n    );\\n\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    string memory image = Base64.encode(bytes(generateSVGImage(hexString)));\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{',\\n                '\\\"image\\\":\\\"',\\n                'data:image/svg+xml;base64,',\\n                image,\\n                '\\\",',\\n                '\\\"image_data\\\":\\\"',\\n                escapeQuotes(generateSVGImage(hexString)),\\n                '\\\",',\\n                generateNameDescription(tokenId, hexString),\\n                generateAttributes(hexColor, hexString),\\n                '}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function getTokenMetadata(uint256 tokenId)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    string memory image = Base64.encode(bytes(generateSVGImage(hexString)));\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json',\\n          '{',\\n          '\\\"image\\\":\\\"',\\n          'data:image/svg+xml;base64,',\\n          image,\\n          '\\\",',\\n          '\\\"image_data\\\":\\\"',\\n          escapeQuotes(generateSVGImage(hexString)),\\n          '\\\",',\\n          generateNameDescription(tokenId, hexString),\\n          generateAttributes(hexColor, hexString),\\n          '}'\\n        )\\n      );\\n  }\\n\\n  function getTokenSVG(uint256 tokenId) public view returns (string memory) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    return generateSVGImage(hexString);\\n  }\\n\\n  function getBase64TokenSVG(uint256 tokenId)\\n    public\\n    view\\n    returns (string memory)\\n  {\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    string memory image = Base64.encode(bytes(generateSVGImage(hexString)));\\n    return string(abi.encodePacked('data:application/json;base64', image));\\n  }\\n\\n  function getHexColor(uint256 tokenId) public view returns (string memory) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    string memory hexString = uintToHexString(hexColor);\\n    return string(abi.encodePacked('#', hexString));\\n  }\\n\\n  function getRGB(uint256 tokenId) public view returns (string memory) {\\n    string memory r = getRed(tokenId).toString();\\n    string memory g = getGreen(tokenId).toString();\\n    string memory b = getBlue(tokenId).toString();\\n\\n    return string(abi.encodePacked('rgb(', r, ',', g, ',', b, ')'));\\n  }\\n\\n  function getRed(uint256 tokenId) public view returns (uint32) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    return ((hexColor >> 16) & 0xFF); // Extract the RR byte\\n  }\\n\\n  function getGreen(uint256 tokenId) public view returns (uint32) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    return ((hexColor >> 8) & 0xFF); // Extract the GG byte\\n  }\\n\\n  function getBlue(uint256 tokenId) public view returns (uint32) {\\n    uint32 hexColor = _hexColors[tokenId];\\n    return ((hexColor) & 0xFF); // Extract the BB byte\\n  }\\n\\n  /*\\n   * Set provenance once it's calculated\\n   */\\n  function setProvenanceHash(string memory provenanceHash) public onlyOwner {\\n    PROVENANCE_HASH = provenanceHash;\\n  }\\n\\n  /**\\n   * Mints The Colors to The Colors Legacy holders\\n   */\\n  function mintNextColors(uint256 numberOfTokens) public {\\n    require(\\n      totalSupply() + numberOfTokens <= MAX_COLORS,\\n      'Purchase would exceed max supply of Colors'\\n    );\\n\\n    uint256 mintIndex;\\n    /*address tokenOwner;*/\\n    for (uint256 i = 0; i < numberOfTokens; i++) {\\n      mintIndex = totalSupply();\\n\\n      if (totalSupply() < MAX_COLORS) {\\n        /*tokenOwner = INFTOwner(THE_COLORS_LEGACY).ownerOf(mintIndex);*/\\n\\n        _safeMint(msg.sender, mintIndex);\\n        generateRandomHexColor(mintIndex);\\n      }\\n    }\\n  }\\n\\n  function generateNameDescription(uint256 tokenId, string memory hexString)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\"external_url\\\":\\\"https://thecolors.art\\\",',\\n          unicode'\\\"description\\\":\\\"The Colors are a set of 8,888 iconic shades generated and stored entirely on-chain to be used as a primitive and for color field vibes. ~ A Color is Forever \\u221e',\\n          '\\\\\\\\nHex: #',\\n          hexString,\\n          '\\\\\\\\n\\\\\\\\nToken id: #',\\n          tokenId.toString(),\\n          '\\\",',\\n          '\\\"name\\\":\\\"#',\\n          hexString,\\n          '\\\",'\\n        )\\n      );\\n  }\\n\\n  function generateAttributes(uint32 hexColor, string memory hexString)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    string memory r = ((hexColor >> 16) & 0xFF).toString(); // Extract the RR byte\\n    string memory g = ((hexColor >> 8) & 0xFF).toString(); // Extract the GG byte\\n    string memory b = ((hexColor) & 0xFF).toString(); // Extract the BB byte\\n\\n    string memory rgb = string(\\n      abi.encodePacked('rgb(', r, ',', g, ',', b, ')')\\n    );\\n\\n    return\\n      string(\\n        abi.encodePacked(\\n          '\\\"attributes\\\":[',\\n          '{\\\"trait_type\\\":\\\"Hex code\\\",\\\"value\\\":\\\"#',\\n          hexString,\\n          '\\\"},'\\n          '{\\\"trait_type\\\":\\\"RGB\\\",\\\"value\\\":\\\"',\\n          rgb,\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Red\\\",\\\"value\\\":\\\"',\\n          r,\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Green\\\",\\\"value\\\":\\\"',\\n          g,\\n          '\\\"},',\\n          '{\\\"trait_type\\\":\\\"Blue\\\",\\\"value\\\":\\\"',\\n          b,\\n          '\\\"}',\\n          ']'\\n        )\\n      );\\n  }\\n\\n  function generateSVGImage(string memory hexString)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<svg width=\\\"690\\\" height=\\\"690\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" style=\\\"background-color:#',\\n          hexString,\\n          '\\\">',\\n          '</svg>'\\n        )\\n      );\\n  }\\n\\n  function generateRandomHexColor(uint256 tokenId) internal returns (uint32) {\\n    uint32 hexColor = uint32(_rng() % 16777215);\\n\\n    while (existingHexColors[hexColor]) {\\n      hexColor = uint32(\\n        uint256(hexColor + block.timestamp * tokenId) % 16777215\\n      );\\n    }\\n\\n    existingHexColors[hexColor] = true;\\n    _hexColors[tokenId] = hexColor;\\n\\n    return hexColor;\\n  }\\n\\n  function uintToHexString(uint256 number) public pure returns (string memory) {\\n    bytes32 value = bytes32(number);\\n    bytes memory alphabet = '0123456789abcdef';\\n\\n    bytes memory str = new bytes(6);\\n    for (uint256 i = 0; i < 3; i++) {\\n      str[i * 2] = alphabet[uint256(uint8(value[i + 29] >> 4))];\\n      str[1 + i * 2] = alphabet[uint256(uint8(value[i + 29] & 0x0f))];\\n    }\\n\\n    return string(str);\\n  }\\n\\n  function escapeQuotes(string memory symbol)\\n    internal\\n    pure\\n    returns (string memory)\\n  {\\n    bytes memory symbolBytes = bytes(symbol);\\n    uint256 quotesCount = 0;\\n    for (uint256 i = 0; i < symbolBytes.length; i++) {\\n      if (symbolBytes[i] == '\\\"') {\\n        quotesCount++;\\n      }\\n    }\\n    if (quotesCount > 0) {\\n      bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\n      uint256 index;\\n      for (uint256 i = 0; i < symbolBytes.length; i++) {\\n        if (symbolBytes[i] == '\\\"') {\\n          escapedBytes[index++] = '\\\\\\\\';\\n        }\\n        escapedBytes[index++] = symbolBytes[i];\\n      }\\n      return string(escapedBytes);\\n    }\\n    return symbol;\\n  }\\n\\n  function _rng() internal view returns (uint256) {\\n    return\\n      uint256(keccak256(abi.encodePacked(block.timestamp + block.difficulty)));\\n  }\\n}\\n\",\"keccak256\":\"0x6a3ff12734d1183f81195e0080d39a049e3b0115e0d11533d415a6d78c3773c8\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604080518082018252600d81526c53796e63207820436f6c6f727360981b60208083019182528351808501909452600984526853594e43204265746160b81b9084015281519192916200006891600091620000fc565b5080516200007e906001906020840190620000fc565b5050506200009b62000095620000a660201b60201c565b620000aa565b6001600b55620001df565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8280546200010a90620001a2565b90600052602060002090601f0160209004810192826200012e576000855562000179565b82601f106200014957805160ff191683800117855562000179565b8280016001018555821562000179579182015b82811115620001795782518255916020019190600101906200015c565b50620001879291506200018b565b5090565b5b808211156200018757600081556001016200018c565b600181811c90821680620001b757607f821691505b60208210811415620001d957634e487b7160e01b600052602260045260246000fd5b50919050565b615a4080620001ef6000396000f3fe6080604052600436106101475760003560e01c806301ffc9a71461014c57806306fdde0314610181578063081812fc146101a3578063095ea7b3146101db5780630c1f529a146101fd57806318160ddd1461021057806323b872dd1461022f5780632f745c591461024f5780633ccfd60b1461026f57806342842e0e146102775780634f6ccce71461029757806360316801146102b75780636352211e146102d757806370a08231146102f7578063715018a6146103175780638da5cb5b1461032c57806395d89b41146103415780639c5e92fb14610356578063a22cb46514610369578063b88d4fde14610389578063c7ab2dbc146103a9578063c87b56dd146103c9578063c8f8b613146103e9578063ce02f82314610411578063deba081314610431578063e985e9c514610444578063f2fde38b14610464578063f47c84c514610484575b600080fd5b34801561015857600080fd5b5061016c610167366004613a6a565b61049a565b60405190151581526020015b60405180910390f35b34801561018d57600080fd5b506101966104c5565b60405161017891906154d5565b3480156101af57600080fd5b506101c36101be366004613b36565b610557565b6040516001600160a01b039091168152602001610178565b3480156101e757600080fd5b506101fb6101f6366004613a00565b6105e4565b005b6101fb61020b366004613b4e565b6106f5565b34801561021c57600080fd5b506008545b604051908152602001610178565b34801561023b57600080fd5b506101fb61024a3660046138e9565b6108d4565b34801561025b57600080fd5b5061022161026a366004613a00565b610905565b6101fb61099b565b34801561028357600080fd5b506101fb6102923660046138e9565b610b1c565b3480156102a357600080fd5b506102216102b2366004613b36565b610b37565b3480156102c357600080fd5b506101966102d2366004613b36565b610bd8565b3480156102e357600080fd5b506101c36102f2366004613b36565b610c60565b34801561030357600080fd5b50610221610312366004613879565b610cd7565b34801561032357600080fd5b506101fb610d5e565b34801561033857600080fd5b506101c3610d99565b34801561034d57600080fd5b50610196610da8565b6101fb610364366004613a2b565b610db7565b34801561037557600080fd5b506101fb6103843660046139cf565b610ec5565b34801561039557600080fd5b506101fb6103a4366004613929565b610ed4565b3480156103b557600080fd5b506101966103c4366004613b36565b610f0c565b3480156103d557600080fd5b506101966103e4366004613b36565b610f51565b3480156103f557600080fd5b506101c3735fbdb2315678afecb367f032d93f642f64180aa381565b34801561041d57600080fd5b5061019661042c366004613b36565b611006565b6101fb61043f366004613b4e565b61105c565b34801561045057600080fd5b5061016c61045f3660046138b1565b611151565b34801561047057600080fd5b506101fb61047f366004613879565b61117f565b34801561049057600080fd5b50610221610d0581565b60006001600160e01b0319821663780e9d6360e01b14806104bf57506104bf8261121f565b92915050565b6060600080546104d490615833565b80601f016020809104026020016040519081016040528092919081815260200182805461050090615833565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b5050505050905090565b60006105628261126f565b6105c85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105ef82610c60565b9050806001600160a01b0316836001600160a01b0316141561065d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016105bf565b336001600160a01b038216148061067957506106798133611151565b6106e65760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016105bf565b6106f0838361128c565b505050565b6002600b5414156107185760405162461bcd60e51b81526004016105bf90615697565b6002600b55600061072860085490565b9050600a8411156107705760405162461bcd60e51b815260206004820152601260248201527109ac2f040dad2dce840626040e0cae440e8f60731b60448201526064016105bf565b600084116107b55760405162461bcd60e51b815260206004820152601260248201527104d696e742073686f756c64206265203e20360741b60448201526064016105bf565b610d056107c68561ffff841661575a565b11156107e45760405162461bcd60e51b81526004016105bf906154e8565b60038211156108055760405162461bcd60e51b81526004016105bf90615660565b61081684668e1bc9bf0400006157d1565b3410156108355760405162461bcd60e51b81526004016105bf906155ae565b61083f83836112fa565b15156001146108605760405162461bcd60e51b81526004016105bf906156ce565b61ffff81165b6108748561ffff841661575a565b8110156108c8576000818152600c60205260409020610894908585613725565b5061089e81611411565b6000828152600d60205260409020556108b68161148a565b806108c08161586e565b915050610866565b50506001600b55505050565b6108de3382611494565b6108fa5760405162461bcd60e51b81526004016105bf9061560f565b6106f0838383611511565b600061091083610cd7565b82106109725760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105bf565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6002600b5414156109be5760405162461bcd60e51b81526004016105bf90615697565b6002600b55336109cc610d99565b6001600160a01b0316146109f25760405162461bcd60e51b81526004016105bf906155da565b4760006064610a028360216157d1565b610a0c9190615793565b905060006101f4610a1e8460436157d1565b610a289190615793565b905060006101f4610a3a8560436157d1565b610a449190615793565b905060006101f4610a568660436157d1565b610a609190615793565b905060006101f4610a728760436157d1565b610a7c9190615793565b905060006101f4610a8e8860436157d1565b610a989190615793565b6040519091507348ae900e9df45441b2001db4da92ce0e7c08c6d29087156108fc029088906000818181858888f19350505050158015610adc573d6000803e3d6000fd5b50604051479750339088156108fc029089906000818181858888f19350505050158015610b0d573d6000803e3d6000fd5b50506001600b55505050505050565b6106f083838360405180602001604052806000815250610ed4565b6000610b4260085490565b8210610ba55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105bf565b60088281548110610bc657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6060610be38261126f565b610bff5760405162461bcd60e51b81526004016105bf90615562565b6000610c0a836116aa565b90506000610c20610c1b8584611a7b565b61214f565b905080610c2c856122c2565b610c3686856122f3565b604051602001610c4893929190614b1a565b60405160208183030381529060405292505050919050565b6000818152600260205260408120546001600160a01b0316806104bf5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016105bf565b60006001600160a01b038216610d425760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016105bf565b506001600160a01b031660009081526003602052604090205490565b33610d67610d99565b6001600160a01b031614610d8d5760405162461bcd60e51b81526004016105bf906155da565b610d976000612405565b565b600a546001600160a01b031690565b6060600180546104d490615833565b6002600b541415610dda5760405162461bcd60e51b81526004016105bf90615697565b6002600b556000610dea60085490565b9050610d058110610e0d5760405162461bcd60e51b81526004016105bf906154e8565b6003821115610e2e5760405162461bcd60e51b81526004016105bf90615660565b668e1bc9bf040000341015610e555760405162461bcd60e51b81526004016105bf906155ae565b610e5f83836112fa565b1515600114610e805760405162461bcd60e51b81526004016105bf906156ce565b6000818152600c60205260409020610e99908484613725565b50610ea381611411565b6000828152600d6020526040902055610ebb8161148a565b50506001600b5550565b610ed0338383612457565b5050565b610ede3383611494565b610efa5760405162461bcd60e51b81526004016105bf9061560f565b610f0684848484612522565b50505050565b6060610f178261126f565b610f335760405162461bcd60e51b81526004016105bf90615562565b6000610f3e836116aa565b9050610f4a8382611a7b565b9392505050565b6060610f5c8261126f565b610f785760405162461bcd60e51b81526004016105bf90615562565b6000610f83836116aa565b90506000610f918483611a7b565b90506000610f9e8261214f565b9050610fdd81610fad876122c2565b610fb788876122f3565b604051602001610fc993929190614db9565b60405160208183030381529060405261214f565b604051602001610fed91906150b4565b6040516020818303038152906040529350505050919050565b60606110118261126f565b61102d5760405162461bcd60e51b81526004016105bf90615562565b6000611038836116aa565b90506000611049610c1b8584611a7b565b905080604051602001610c4891906150f9565b61106583610c60565b6001600160a01b0316336001600160a01b0316146110c55760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79204e465420686f6c6465722063616e20757064617465436f6c6f727360448201526064016105bf565b60038111156110e65760405162461bcd60e51b81526004016105bf90615660565b6611c37937e0800034101561110d5760405162461bcd60e51b81526004016105bf906155ae565b61111782826112fa565b15156001146111385760405162461bcd60e51b81526004016105bf906156ce565b6000838152600c60205260409020610f06908383613725565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33611188610d99565b6001600160a01b0316146111ae5760405162461bcd60e51b81526004016105bf906155da565b6001600160a01b0381166112135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105bf565b61121c81612405565b50565b60006001600160e01b031982166380ac58cd60e01b148061125057506001600160e01b03198216635b5e139f60e01b145b806104bf57506301ffc9a760e01b6001600160e01b03198316146104bf565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112c182610c60565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000735fbdb2315678afecb367f032d93f642f64180aa3815b8381101561140657816001600160a01b0316636352211e86868481811061134a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061135f9190613b14565b61ffff166040518263ffffffff1660e01b815260040161138191815260200190565b60206040518083038186803b15801561139957600080fd5b505afa1580156113ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d19190613895565b6001600160a01b0316336001600160a01b0316146113f4576000925050506104bf565b806113fe8161586e565b915050611313565b506001949350505050565b60008061141f83600161575a565b9050735fbdb2315678afecb367f032d93f642f64180aa361144081836157d1565b61144983612555565b42448460405160200161145f9493929190613f4d565b6040516020818303038152906040528051906020012060001c611482919061575a565b949350505050565b61121c338261266e565b600061149f8261126f565b6114bb5760405162461bcd60e51b81526004016105bf90615562565b60006114c683610c60565b9050806001600160a01b0316846001600160a01b031614806115015750836001600160a01b03166114f684610557565b6001600160a01b0316145b8061148257506114828185611151565b826001600160a01b031661152482610c60565b6001600160a01b03161461158c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016105bf565b6001600160a01b0382166115ee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105bf565b6115f9838383612688565b61160460008261128c565b6001600160a01b038316600090815260036020526040812080546001929061162d9084906157f0565b90915550506001600160a01b038216600090815260036020526040812080546001929061165b90849061575a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206159cb83398151915291a4505050565b6116b26137d2565b6116ba6137d2565b6000838152600d602052604090819020548151600f808252610200820190935290918160200160208202803683375050506040838101919091528051600f808252610200820190925290602082016101e080368337505050606083015260408051600f808252610200820190925290602082016101e08036833750505060a083015260408051600f808252610200820190925290602082016101e080368337505050608083015260408051600f808252610200820190925290602082016101e08036833750505060c083015260408051600f808252610200820190925290602082016101e08036833701905050602083015260408051600f80825261020082019092529081602001602082028036833750505082526117e26103e86103ff60701b8316615889565b6117ed90600161575a565b61ffff1660e083015260005b600f811015611a72576118126101f46103ff8416615889565b61181d90600161575a565b8360400151828151811061184157634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101526101f461186860106303ff00008516615793565b6118729190615889565b61187d90600161575a565b836060015182815181106118a157634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091018201526097906118c7906101ff60201b8516615793565b6118d19190615889565b6118dc9060fa61575a565b8360a00151828151811061190057634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015261192660976101ff603085901c16615889565b6119319060fa61575a565b8360800151828151811061195557634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015261016861197d60406101ff60401b8516615793565b6119879190615889565b61199290600161575a565b8360c0015182815181106119b657634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101526119dc60026101ff605085901c16615889565b83602001518281518110611a0057634e487b7160e01b600052603260045260246000fd5b60ff90921660209283029190910190910152611a2560036101ff606085901c16615889565b8351805183908110611a4757634e487b7160e01b600052603260045260246000fd5b60ff9092166020928302919091019091015260029190911c9080611a6a8161586e565b9150506117f9565b50909392505050565b60606000611a8884612740565b6040805160038082526080820190925291925060009190816020015b6060815260200190600190039081611aa45750506040805160038082526080820190925291925060009190602082015b6060815260200190600190039081611ad45750506040805160038082526080820190925291925060009190602082015b6060815260200190600190039081611b0457905050905060005b6003811015611c2957848181518110611b4757634e487b7160e01b600052603260045260246000fd5b6020026020010151848281518110611b6f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250848181518110611b9a57634e487b7160e01b600052603260045260246000fd5b6020026020010151838281518110611bc257634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180604001604052806005815260200164776869746560d81b815250828281518110611c0b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611c219061586e565b915050611b1e565b506103de8660e0015161ffff1610611e06576040518060400160405280600781526020016611a1a21ba3199960c91b81525083600081518110611c7c57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280600781526020016611a29aa29a229960c91b81525083600181518110611cc857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001660466e646ac862760cb1b81525083600281518110611d1457634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180604001604052806005815260200164626c61636b60d81b81525082600081518110611d5e57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001660234330433043360cc1b81525082600181518110611daa57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280600781526020016611a29aa29a229960c91b81525082600281518110611df657634e487b7160e01b600052603260045260246000fd5b60200260200101819052506120e3565b6103b68660e0015161ffff1610611fd257604051806040016040528060078152602001660236330633063360cc1b81525083600081518110611e5857634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280600781526020016611b29ab29a329960c91b81525083600181518110611ea457634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001660236330633063360cc1b81525083600281518110611ef057634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180604001604052806005815260200164776869746560d81b81525082600081518110611f3a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001660234330433043360cc1b81525082600181518110611f8657634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280600781526020016611a1a21ba3199960c91b81525082600281518110611df657634e487b7160e01b600052603260045260246000fd5b6103528660e0015161ffff16106120e3578360008151811061200457634e487b7160e01b600052603260045260246000fd5b60200260200101518160008151811061202d57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508360018151811061205957634e487b7160e01b600052603260045260246000fd5b60200260200101518160018151811061208257634e487b7160e01b600052603260045260246000fd5b6020026020010181905250836002815181106120ae57634e487b7160e01b600052603260045260246000fd5b6020026020010151816002815181106120d757634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b60006120ef84886129fb565b905060006120fc84612d67565b9050600061210a868a612ee0565b9050600061211785613064565b90508383838360405160200161213094939291906141ec565b6040516020818303038152906040529850505050505050505092915050565b606081516000141561216f57505060408051602081019091526000815290565b600060405180606001604052806040815260200161596b604091399050600060038451600261219e919061575a565b6121a89190615793565b6121b39060046157d1565b905060006121c282602061575a565b6001600160401b038111156121e757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612211576020820181803683370190505b509050818152600183018586518101602084015b8183101561227d576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101612225565b60038951066001811461229757600281146122a8576122b4565b613d3d60f01b6001198301526122b4565b603d60f81b6000198301525b509398975050505050505050565b60606122cd82612555565b6040516020016122dd91906149f1565b6040516020818303038152906040529050919050565b606060006040518060400160405280600681526020016521b7b6b6b7b760d11b81525090506103de8360e0015161ffff161061234a575060408051808201909152600481526311dbdb1960e21b60208201526123ad565b6103b68360e0015161ffff161061237e575060408051808201909152600681526529b4b63b32b960d11b60208201526123ad565b6103528360e0015161ffff16106123ad5750604080518082019091526005815264111c9a599d60da1b60208201525b6000816123b986613139565b6040516020016123ca9291906153ed565b6040516020818303038152906040529050806040516020016123ec9190613cb8565b6040516020818303038152906040529250505092915050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156124b55760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016105bf565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61252d848484611511565b6125398484848461330a565b610f065760405162461bcd60e51b81526004016105bf90615510565b6060816125795750506040805180820190915260018152600360fc1b602082015290565b8160005b81156125a3578061258d8161586e565b915061259c9050600a83615793565b915061257d565b6000816001600160401b038111156125cb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156125f5576020820181803683370190505b5090505b84156114825761260a6001836157f0565b9150612617600a86615889565b61262290603061575a565b60f81b81838151811061264557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612667600a86615793565b94506125f9565b610ed082826040518060200160405280600081525061340c565b6001600160a01b0383166126e3576126de81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612706565b816001600160a01b0316836001600160a01b03161461270657612706838261343f565b6001600160a01b03821661271d576106f0816134dc565b826001600160a01b0316826001600160a01b0316146106f0576106f082826135b5565b6000818152600c602090815260408083208054825181850281018501909352808352606094938301828280156127bd57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116127845790505b5050506000868152600c602052604080822054815160038082526080820190935295965094919350909150816020015b60608152602001906001900390816127ed579050509050604051806040016040528060078152602001661199191919191960c91b8152508160008151811061284557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001662337373737373760c81b8152508160018151811061289157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001662341414141414160c81b815250816002815181106128dd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b828110156129f257735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b031663e01c8fa185838151811061293657634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff166040518263ffffffff1660e01b815260040161296091815260200190565b60006040518083038186803b15801561297857600080fd5b505afa15801561298c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129b49190810190613aa2565b8282815181106129d457634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806129ea9061586e565b9150506128eb565b50949350505050565b6040805180820190915260168152751e33903334b63616b7b830b1b4ba3c9e91181719911f60511b60208201526060908160005b600f811015612d555784602001518181518110612a5c57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1660001415612b74578585600001518281518110612a9457634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1681518110612abd57634e487b7160e01b600052603260045260246000fd5b6020026020010151612afd86604001518381518110612aec57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16612555565b612b2487606001518481518110612aec57634e487b7160e01b600052603260045260246000fd5b612b4b8860a001518581518110612aec57634e487b7160e01b600052603260045260246000fd5b604051602001612b5e9493929190614cfe565b6040516020818303038152906040529150612d1e565b84602001518181518110612b9857634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1660011415612d1e578585600001518281518110612bd057634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1681518110612bf957634e487b7160e01b600052603260045260246000fd5b6020026020010151612c45600287604001518481518110612c2a57634e487b7160e01b600052603260045260246000fd5b6020026020010151612c3c9190615772565b61ffff16612555565b612c6e600288606001518581518110612c2a57634e487b7160e01b600052603260045260246000fd5b612ca98860a001518581518110612c9557634e487b7160e01b600052603260045260246000fd5b60200260200101516002612c3c91906157a7565b612cd089608001518681518110612c9557634e487b7160e01b600052603260045260246000fd5b612cf78a60c001518781518110612aec57634e487b7160e01b600052603260045260246000fd5b604051602001612d0c96959493929190614be9565b60405160208183030381529060405291505b8282604051602001612d31929190613cd4565b60405160208183030381529060405292508080612d4d9061586e565b915050612a2f565b50816040516020016123ec9190613eea565b6060600082600081518110612d8c57634e487b7160e01b600052603260045260246000fd5b602002602001015183600181518110612db557634e487b7160e01b600052603260045260246000fd5b602002602001015184600081518110612dde57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612df8939291906152b3565b60405160208183030381529060405290506000604051602001612e1a9061513d565b6040516020818303038152906040529050600084600281518110612e4e57634e487b7160e01b600052603260045260246000fd5b602002602001015185600081518110612e7757634e487b7160e01b600052603260045260246000fd5b602002602001015186600281518110612ea057634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612eba93929190613f7c565b6040516020818303038152906040529050828282604051602001610fed93929190613d03565b6060600083600081518110612f0557634e487b7160e01b600052603260045260246000fd5b602002602001015184600181518110612f2e57634e487b7160e01b600052603260045260246000fd5b602002602001015185600281518110612f5757634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612f7193929190614319565b60405160208183030381529060405290506103b68360e0015161ffff1610610f4a578084600081518110612fb557634e487b7160e01b600052603260045260246000fd5b602002602001015185600181518110612fde57634e487b7160e01b600052603260045260246000fd5b60200260200101518660028151811061300757634e487b7160e01b600052603260045260246000fd5b60200260200101518760008151811061303057634e487b7160e01b600052603260045260246000fd5b602002602001015160405160200161304c959493929190613d46565b60405160208183030381529060405290509392505050565b606060008260008151811061308957634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016130a19190614e5e565b60405160208183030381529060405290506000836001815181106130d557634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016130ed91906145da565b604051602081830303815290604052905060008460028151811061312157634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612eba91906147bc565b6000818152600c602090815260408083208054825181850281018501909352808352606094938301828280156131b657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161317d5790505b5050506000868152600c60205260408120549394506060925090505b828110156129f2578381815181106131fa57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1660001415613213576129f2565b81735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b031663e01c8fa186848151811061325757634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff166040518263ffffffff1660e01b815260040161328191815260200190565b60006040518083038186803b15801561329957600080fd5b505afa1580156132ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132d59190810190613aa2565b6040516020016132e6929190613f12565b604051602081830303815290604052915080806133029061586e565b9150506131d2565b60006001600160a01b0384163b1561140657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061334e9033908990889088906004016154a2565b602060405180830381600087803b15801561336857600080fd5b505af1925050508015613398575060408051601f3d908101601f1916820190925261339591810190613a86565b60015b6133f2573d8080156133c6576040519150601f19603f3d011682016040523d82523d6000602084013e6133cb565b606091505b5080516133ea5760405162461bcd60e51b81526004016105bf90615510565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611482565b61341683836135f9565b613423600084848461330a565b6106f05760405162461bcd60e51b81526004016105bf90615510565b6000600161344c84610cd7565b61345691906157f0565b6000838152600760205260409020549091508082146134a9576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906134ee906001906157f0565b6000838152600960205260408120546008805493945090928490811061352457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061355357634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061359957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006135c083610cd7565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661364f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105bf565b6136588161126f565b156136a45760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016105bf565b6136b060008383612688565b6001600160a01b03821660009081526003602052604081208054600192906136d990849061575a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206159cb833981519152908290a45050565b82805482825590600052602060002090600f016010900481019282156137c25791602002820160005b8382111561379257833561ffff1683826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030261374e565b80156137c05782816101000a81549061ffff0219169055600201602081600101049283019260010302613792565b505b506137ce92915061381b565b5090565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001600061ffff1681525090565b5b808211156137ce576000815560010161381c565b60008083601f840112613841578182fd5b5081356001600160401b03811115613857578182fd5b6020830191508360208260051b850101111561387257600080fd5b9250929050565b60006020828403121561388a578081fd5b8135610f4a816158df565b6000602082840312156138a6578081fd5b8151610f4a816158df565b600080604083850312156138c3578081fd5b82356138ce816158df565b915060208301356138de816158df565b809150509250929050565b6000806000606084860312156138fd578081fd5b8335613908816158df565b92506020840135613918816158df565b929592945050506040919091013590565b6000806000806080858703121561393e578081fd5b8435613949816158df565b93506020850135613959816158df565b92506040850135915060608501356001600160401b0381111561397a578182fd5b8501601f8101871361398a578182fd5b803561399d61399882615733565b615703565b8181528860208385010111156139b1578384fd5b81602084016020830137908101602001929092525092959194509250565b600080604083850312156139e1578182fd5b82356139ec816158df565b9150602083013580151581146138de578182fd5b60008060408385031215613a12578182fd5b8235613a1d816158df565b946020939093013593505050565b60008060208385031215613a3d578182fd5b82356001600160401b03811115613a52578283fd5b613a5e85828601613830565b90969095509350505050565b600060208284031215613a7b578081fd5b8135610f4a816158f4565b600060208284031215613a97578081fd5b8151610f4a816158f4565b600060208284031215613ab3578081fd5b81516001600160401b03811115613ac8578182fd5b8201601f81018413613ad8578182fd5b8051613ae661399882615733565b818152856020838501011115613afa578384fd5b613b0b826020830160208601615807565b95945050505050565b600060208284031215613b25578081fd5b813561ffff81168114610f4a578182fd5b600060208284031215613b47578081fd5b5035919050565b600080600060408486031215613b62578081fd5b8335925060208401356001600160401b03811115613b7e578182fd5b613b8a86828701613830565b9497909650939450505050565b60008151808452613baf816020860160208601615807565b601f01601f19169290920160200192915050565b60008151613bd5818560208601615807565b9290920192915050565b7f643d224d3139352e352032343863302033302033372e352033302035322e352081527f30732035322e352d33302035322e352030732d33372e352033302d35322e352060208201527f30732d35322e352d33302d35322e352030222066696c6c3d226e6f6e65223e006040820152605f0190565b7f3c616e696d617465206174747269627574654e616d653d2266696c6c222076618152716c7565733d227472616e73706172656e743b60701b602082015260320190565b603b60f81b815260010190565b661e17b830ba341f60c91b815260070190565b60008251613cca818460208701615807565b9190910192915050565b60008351613ce6818460208801615807565b835190830190613cfa818360208801615807565b01949350505050565b60008451613d15818460208901615807565b845190830190613d29818360208901615807565b8451910190613d3c818360208801615807565b0195945050505050565b60008651613d58818460208b01615807565b80830190507f3c616e696d61746520626567696e3d22702e626567696e3b712e626567696e3b81527f722e626567696e2220617474726962757465547970653d22584d4c222061747460208201527f7269627574654e616d653d227374726f6b652d646173686f666673657422206660408201527f726f6d3d22302220746f3d2232333022206475723d223173222066696c6c3d22606082015269333932b2bd329110179f60b11b60808201527f3c616e696d61746520626567696e3d22732e626567696e3b732e656e64222061608a8201527f7474726962757465547970653d22584d4c22206174747269627574654e616d6560aa820152711e9139ba3937b5b291103b30b63ab2b99e9160711b60ca8201528651613e7f8160dc840160208b01615807565b613edd613eb6613eb0613ea5613eaa613ea5613e9f60dc888a0101613c98565b8d613bc3565b613c98565b8a613bc3565b87613bc3565b7a1110323ab91e911b3991103334b6361e91333932b2bd329110179f60291b8152601b0190565b9998505050505050505050565b60008251613efc818460208701615807565b631e17b39f60e11b920191825250600401919050565b60008351613f24818460208801615807565b835190830190613f38818360208801615807565b600b60fa1b9101908152600101949350505050565b60008551613f5f818460208a01615807565b919091019384525060208301919091526040820152606001919050565b7f3c616e696d61746520626567696e3d22732e656e64222061747472696275746581527f547970653d22584d4c22206174747269627574654e616d653d227374726f6b6560208201526911103b30b63ab2b99e9160b11b604082015260008451613fed81604a850160208901615807565b8083019050603b60f81b80604a830152855161401081604b850160208a01615807565b604b920191820152835161402b81604c840160208801615807565b791110323ab91e911a3991103334b6361e91333932b2bd3291179f60311b9101604c8101919091527f3c616e696d6174652069643d22612220626567696e3d22732e626567696e3b7360668201527f2e626567696e2b31733b732e626567696e2b32733b732e626567696e2b33733b60868201527f732e626567696e2b34733b732e626567696e2b35733b732e626567696e2b367360a682015261011160f51b60c68201527f617474726962757465547970653d22584d4c22206174747269627574654e616d60c88201527f653d227374726f6b652d7769647468222076616c7565733d2231363b32303b3160e88201527b1b1110323ab91e9118b991103334b6361e91333932b2bd329110179f60211b6101088201526141e261012482017f3c616e696d6174652069643d22732220617474726962757465547970653d225881527f4d4c22206174747269627574654e616d653d227374726f6b652d646173686f6660208201527f667365742220626567696e3d2230733b732e656e642220746f3d20222d313830604082015279181110323ab91e911b39911010179f1e17b830ba341f1e17b39f60311b6060820152607a0190565b9695505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e60208201527f77332e6f72672f313939392f786c696e6b222077696474683d2235303022206860408201527f65696768743d22353030222076696577626f783d22302030203530302035303060608201527f22207374796c653d226261636b67726f756e642d636f6c6f723a23313131313160808201526218911f60e91b60a0820152600085516142c88160a3850160208a01615807565b8551908301906142df8160a3840160208a01615807565b85519101906142f58160a3840160208901615807565b845191019061430b8160a3840160208801615807565b0160a3019695505050505050565b691e339034b21e9131111f60b11b81527f3c7061746820643d224d3134342e342038392e3331682d33312e33632d31362e600a8201527f38382033322e353720302037312e333820302037312e33386833312e33632d33602a8201527f302e39352d333520302d37312e333820302d37312e33385a6d2d31332e313720604a8201527f36332e3736682d31312e3635732d31322e34372d31372e333820302d35352e36606a8201527f386831312e3635732d32302e382032352e313820302035352e36385a22207472608a8201527f616e73666f726d3d226d61747269782832203020302032202d3935203029222060aa8201527f7374726f6b653d22626c61636b222066696c6c2d6f7061636974793d22302e3960ca82015261011160f51b60ea8201527f7374726f6b652d77696474683d222e3722207374726f6b652d6461736861727260ec8201527f61793d22323022207374726f6b652d646173686f66667365743d223130223e0061010c8201527f3c616e696d6174652069643d22702220626567696e3d22732e626567696e2b3261012b8201526000805160206159ab83398151915261014b82015265626c61636b3b60d01b61016b8201526000613b0b6145696145d4614588826145636145176144f96101718a01613e9f565b711db13630b1b59110323ab91e91193991179f60711b815260120190565b7f3c616e696d6174652069643d22712220626567696e3d22732e626567696e2b3481526000805160206159ab833981519152602082015265626c61636b3b60d01b604082015260460190565b89613bc3565b721db13630b1b59110323ab91e9119399110179f60691b815260130190565b7f3c616e696d6174652069643d22722220626567696e3d22732e626567696e2b3681526000805160206159ab833981519152602082015265626c61636b3b60d01b604082015260460190565b85613bc3565b6501e3830ba34160d51b81527f643d224d203130372e33313739203131372e3534353763202d31332e3339383560068201527f2032352e3835323420302035362e36353820302035362e363538206820362e3860268201527f37332063202d302e31353335202d302e34303637202d392e37373234202d323660468201527701718989c1a10171819981a90169a9b17191b1a1c103d11160451b60668201527f7472616e73666f726d3d227472616e736c617465282d38382c36302920736361607e8201527f6c6528312e332c312e332922207374726f6b652d6f7061636974793d222e3335609e8201527f222066696c6c2d6f7061636974793d222e35222066696c6c3d227472616e737060be8201526630b932b73a111f60c91b60de820152600061470960e58301613c54565b8351614719818360208801615807565b7f3b7472616e73706172656e742220626567696e3d22772e626567696e2b2e327391019081526b1110323ab91e9118b991179f60a11b602082015260008051602061592b833981519152602c8201526000805160206159eb833981519152604c8201527f6172656e742220626567696e3d22772e626567696e2b2e327322206475723d22606c8201526418b991179f60d91b608c82015261148260918201613ca5565b6501e3830ba34160d51b81527f643d224d3130372e33313739203131372e3534353720632d31332e333938352060068201527f32352e3835323420302035362e36353820302035362e3635382068362e38373360268201527f20632d302e313533352d302e343036372d392e373732342d32362e313138342060468201526f0171819981a969a9b17191b1a1c3d11160851b60668201527f7472616e73666f726d3d227472616e736c617465282d38322c3130342920736360768201527f616c6528312c312922207374726f6b652d6f7061636974793d222e303522206660968201527f696c6c2d6f7061636974793d22302e33222066696c6c3d227472616e7370617260b68201526432b73a111f60d91b60d682015260006148e160db8301613c54565b83516148f1818360208801615807565b7f3b7472616e73706172656e742220626567696e3d22772e626567696e2b2e347391019081526b1110323ab91e9118b991179f60a11b602082015260008051602061592b833981519152602c8201526000805160206159eb833981519152604c8201527f6172656e742220626567696e3d22772e626567696e2b2e347322206475723d22606c8201526418b991179f60d91b608c8201527f3c2f706174683e3c2f673e3c75736520687265663d2223622220783d222d353060918201527f302220793d222d35303022207472616e73666f726d3d22726f7461746528313860b18201526a181491179f1e17b9bb339f60a91b60d182015260dc8101611482565b7f2265787465726e616c5f75726c223a2268747470733a2f2f73796e6378636f6c8152681bdc9ccb9e1e5e888b60ba1b60208201527f226465736372697074696f6e223a225468652053594e4378436f6c6f7273206160298201527f72652067656e65726174656420616e642073746f72656420656e746972656c7960498201527f206f6e2d636861696e2c20616e64206d6179206265206c696e6b65642077697460698201527f6820757020746f20332054484520434f4c4f5253207072696d6974697665732060898201526f3337b91032b834b19032b33332b1ba1760811b60a98201526c5c6e546f6b656e2069643a202360981b60b982015260008251614b028160c6850160208701615807565b601160f91b60c693909101928301525060c701919050565b743230ba309d30b8383634b1b0ba34b7b717b539b7b760591b8152607b60f81b6015820152681134b6b0b3b2911d1160b91b60168201527919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b601f8201528351600090614b8a816039850160208901615807565b61088b60f21b6039918401918201528451614bac81603b840160208901615807565b600b60fa1b603b92909101918201528351614bce81603c840160208801615807565b607d60f81b603c9290910191820152603d0195945050505050565b6b1e3932b1ba103334b6361e9160a11b81528651600090614c1181600c850160208c01615807565b6411103c1e9160d91b600c918401918201528751614c36816011840160208c01615807565b6411103c9e9160d91b601192909101918201528651614c5c816016840160208b01615807565b6811103bb4b23a341e9160b91b601692909101918201528551614c8681601f840160208a01615807565b6911103432b4b3b43a1e9160b11b601f92909101918201528451614cb1816029840160208901615807565b614cf0614ce0613eb06029848601017304440e8e4c2dce6ccdee4da7a44e4dee8c2e8ca560631b815260140190565b631491179f60e11b815260040190565b9a9950505050505050505050565b6d1e31b4b931b632903334b6361e9160911b81528451600090614d2881600e850160208a01615807565b65111031bc1e9160d11b600e918401918201528551614d4e816014840160208a01615807565b65111031bc9e9160d11b601492909101918201528451614d7581601a840160208901615807565b641110391e9160d91b601a92909101918201528351614d9b81601f840160208801615807565b6211179f60e91b601f92909101918201526022019695505050505050565b607b60f81b8152681134b6b0b3b2911d1160b91b60018201527919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b600a8201528351600090614e0b816024850160208901615807565b61088b60f21b6024918401918201528451614e2d816026840160208901615807565b8451910190614e43816026840160208801615807565b607d60f81b6026929091019182015260270195945050505050565b7f3c2f706174683e3c7061746820643d224d3130372e33313739203131372e353481527f3537632d31332e333938352032352e3835323420302035362e3635382030203560208201527f362e363538206820362e383733632d302e313533352d302e343036372d392e3760408201527b01b991a16991b1718989c1a10171819981a969a9b17191b1a1c3d11160251b60608201527f7472616e73666f726d3d227472616e736c617465282d38352c31352920736361607c8201527f6c6528312e362c312e362922207374726f6b652d6f7061636974793d222e3722609c8201527f2066696c6c2d6f7061636974793d222e37222066696c6c3d227472616e73706160bc8201527f72656e74223e3c616e696d6174652069643d227722206174747269627574654e60dc8201527f616d653d2266696c6c222076616c7565733d227472616e73706172656e743b0060fc820152600061011b8351614fc78183860160208801615807565b7f3b7472616e73706172656e742220626567696e3d22702e626567696e2b2e3473908401828101919091527f3b712e626567696e2b2e34733b722e626567696e2b2e347322206475723d223161013b820152633991179f60e11b61015b8201527f3c616e696d61746520626567696e3d22772e626567696e22206174747269627561015f8201527f74654e616d653d227374726f6b65222076616c7565733d227472616e7370617261017f8201527f656e743b626c61636b3b7472616e73706172656e7422206475723d223173222f61019f820152601f60f91b6101bf820152613b0b6101c08201613ca5565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516150ec81601d850160208701615807565b91909101601d0192915050565b7b19185d184e985c1c1b1a58d85d1a5bdb8bda9cdbdb8ed8985cd94d8d60221b81526000825161513081601c850160208701615807565b91909101601c0192915050565b60008051602061590b833981519152815260008051602061594b833981519152602082018190527f6b652d646173686172726179222076616c7565733d22303b35303b3022206475604083015275391e911b3991103334b6361e91333932b2bd3291179f60511b60608301527f3c616e696d61746520626567696e3d22612e626567696e222061747472696275607683015260968201527f6b652d7769647468222076616c7565733d2231363b32303b313622206475723d60b6820152731118b991103334b6361e91333932b2bd3291179f60611b60d68201527f3c2f706174683e3c706174682069643d22696e66696e6974795f32222073747260ea8201527f6f6b652d6461736861727261793d2233303022207374726f6b652d646173686f61010a8201527f66667365743d2233303022207374726f6b653d2223464631313131222073747261012a8201526e037b5b296bbb4b23a341e91189b111608d1b61014a82015260006104bf6101598301613bdf565b7f3c672069643d22696e66696e6974795f31223e3c706174682069643d22696e6681527f696e69747922207374726f6b652d6461736861727261793d223022207374726f60208201527f6b652d646173686f66667365743d223022207374726f6b652d77696474683d226040820152630189b11160e51b6060820152600061533d60648301613bdf565b60008051602061590b833981519152815260008051602061594b83398151915260208201526c35b29110103b30b63ab2b99e9160991b6040820152855161538b81604d840160208a01615807565b808201915050603b60f81b80604d83015285516153af81604e850160208a01615807565b604e9201918201526141e26153c7604f830186613bc3565b791110323ab91e911a3991103334b6361e91333932b2bd3291179f60311b8152601a0190565b6d2261747472696275746573223a5b60901b81527f7b2274726169745f74797065223a22526172697479222c2276616c7565223a22600e820152825160009061543d81602e850160208801615807565b62089f4b60ea1b602e918401918201527f7b2274726169745f74797065223a22436f6c6f7273222c2276616c7565223a2260318201528351615486816051840160208801615807565b62227d5d60e81b60519290910191820152605401949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906141e290830184613b97565b602081526000610f4a6020830184613b97565b6020808252600e908201526d4578636565647320737570706c7960901b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b602080825260129082015271496e73756666696369656e742066756e647360701b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601d908201527f2320434f4c4f525320746f6b656e496473206d757374206265203c3d33000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601b908201527a21a7a627a929903737ba1037bbb732b210313c9039b2b73232b91760291b604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561572b5761572b6158c9565b604052919050565b60006001600160401b0382111561574c5761574c6158c9565b50601f01601f191660200190565b6000821982111561576d5761576d61589d565b500190565b600061ffff80841680615787576157876158b3565b92169190910492915050565b6000826157a2576157a26158b3565b500490565b600061ffff808316818516818304811182151516156157c8576157c861589d565b02949350505050565b60008160001904831182151516156157eb576157eb61589d565b500290565b6000828210156158025761580261589d565b500390565b60005b8381101561582257818101518382015260200161580a565b83811115610f065750506000910152565b600181811c9082168061584757607f821691505b6020821081141561586857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156158825761588261589d565b5060010190565b600082615898576158986158b3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461121c57600080fd5b6001600160e01b03198116811461121c57600080fdfe3c616e696d61746520626567696e3d22732e626567696e2220617474726962753c616e696d617465206174747269627574654e616d653d227374726f6b6522207465547970653d22584d4c22206174747269627574654e616d653d227374726f4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f7322206174747269627574654e616d653d2266696c6c222076616c7565733d22ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef76616c7565733d227472616e73706172656e743b626c61636b3b7472616e7370a264697066735822122086086993968ed1b2803afa8e8f4ae6c1fc129e2d5c7727c444563b1d6e012e0164736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101475760003560e01c806301ffc9a71461014c57806306fdde0314610181578063081812fc146101a3578063095ea7b3146101db5780630c1f529a146101fd57806318160ddd1461021057806323b872dd1461022f5780632f745c591461024f5780633ccfd60b1461026f57806342842e0e146102775780634f6ccce71461029757806360316801146102b75780636352211e146102d757806370a08231146102f7578063715018a6146103175780638da5cb5b1461032c57806395d89b41146103415780639c5e92fb14610356578063a22cb46514610369578063b88d4fde14610389578063c7ab2dbc146103a9578063c87b56dd146103c9578063c8f8b613146103e9578063ce02f82314610411578063deba081314610431578063e985e9c514610444578063f2fde38b14610464578063f47c84c514610484575b600080fd5b34801561015857600080fd5b5061016c610167366004613a6a565b61049a565b60405190151581526020015b60405180910390f35b34801561018d57600080fd5b506101966104c5565b60405161017891906154d5565b3480156101af57600080fd5b506101c36101be366004613b36565b610557565b6040516001600160a01b039091168152602001610178565b3480156101e757600080fd5b506101fb6101f6366004613a00565b6105e4565b005b6101fb61020b366004613b4e565b6106f5565b34801561021c57600080fd5b506008545b604051908152602001610178565b34801561023b57600080fd5b506101fb61024a3660046138e9565b6108d4565b34801561025b57600080fd5b5061022161026a366004613a00565b610905565b6101fb61099b565b34801561028357600080fd5b506101fb6102923660046138e9565b610b1c565b3480156102a357600080fd5b506102216102b2366004613b36565b610b37565b3480156102c357600080fd5b506101966102d2366004613b36565b610bd8565b3480156102e357600080fd5b506101c36102f2366004613b36565b610c60565b34801561030357600080fd5b50610221610312366004613879565b610cd7565b34801561032357600080fd5b506101fb610d5e565b34801561033857600080fd5b506101c3610d99565b34801561034d57600080fd5b50610196610da8565b6101fb610364366004613a2b565b610db7565b34801561037557600080fd5b506101fb6103843660046139cf565b610ec5565b34801561039557600080fd5b506101fb6103a4366004613929565b610ed4565b3480156103b557600080fd5b506101966103c4366004613b36565b610f0c565b3480156103d557600080fd5b506101966103e4366004613b36565b610f51565b3480156103f557600080fd5b506101c3735fbdb2315678afecb367f032d93f642f64180aa381565b34801561041d57600080fd5b5061019661042c366004613b36565b611006565b6101fb61043f366004613b4e565b61105c565b34801561045057600080fd5b5061016c61045f3660046138b1565b611151565b34801561047057600080fd5b506101fb61047f366004613879565b61117f565b34801561049057600080fd5b50610221610d0581565b60006001600160e01b0319821663780e9d6360e01b14806104bf57506104bf8261121f565b92915050565b6060600080546104d490615833565b80601f016020809104026020016040519081016040528092919081815260200182805461050090615833565b801561054d5780601f106105225761010080835404028352916020019161054d565b820191906000526020600020905b81548152906001019060200180831161053057829003601f168201915b5050505050905090565b60006105628261126f565b6105c85760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006105ef82610c60565b9050806001600160a01b0316836001600160a01b0316141561065d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016105bf565b336001600160a01b038216148061067957506106798133611151565b6106e65760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b60648201526084016105bf565b6106f0838361128c565b505050565b6002600b5414156107185760405162461bcd60e51b81526004016105bf90615697565b6002600b55600061072860085490565b9050600a8411156107705760405162461bcd60e51b815260206004820152601260248201527109ac2f040dad2dce840626040e0cae440e8f60731b60448201526064016105bf565b600084116107b55760405162461bcd60e51b815260206004820152601260248201527104d696e742073686f756c64206265203e20360741b60448201526064016105bf565b610d056107c68561ffff841661575a565b11156107e45760405162461bcd60e51b81526004016105bf906154e8565b60038211156108055760405162461bcd60e51b81526004016105bf90615660565b61081684668e1bc9bf0400006157d1565b3410156108355760405162461bcd60e51b81526004016105bf906155ae565b61083f83836112fa565b15156001146108605760405162461bcd60e51b81526004016105bf906156ce565b61ffff81165b6108748561ffff841661575a565b8110156108c8576000818152600c60205260409020610894908585613725565b5061089e81611411565b6000828152600d60205260409020556108b68161148a565b806108c08161586e565b915050610866565b50506001600b55505050565b6108de3382611494565b6108fa5760405162461bcd60e51b81526004016105bf9061560f565b6106f0838383611511565b600061091083610cd7565b82106109725760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016105bf565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6002600b5414156109be5760405162461bcd60e51b81526004016105bf90615697565b6002600b55336109cc610d99565b6001600160a01b0316146109f25760405162461bcd60e51b81526004016105bf906155da565b4760006064610a028360216157d1565b610a0c9190615793565b905060006101f4610a1e8460436157d1565b610a289190615793565b905060006101f4610a3a8560436157d1565b610a449190615793565b905060006101f4610a568660436157d1565b610a609190615793565b905060006101f4610a728760436157d1565b610a7c9190615793565b905060006101f4610a8e8860436157d1565b610a989190615793565b6040519091507348ae900e9df45441b2001db4da92ce0e7c08c6d29087156108fc029088906000818181858888f19350505050158015610adc573d6000803e3d6000fd5b50604051479750339088156108fc029089906000818181858888f19350505050158015610b0d573d6000803e3d6000fd5b50506001600b55505050505050565b6106f083838360405180602001604052806000815250610ed4565b6000610b4260085490565b8210610ba55760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016105bf565b60088281548110610bc657634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6060610be38261126f565b610bff5760405162461bcd60e51b81526004016105bf90615562565b6000610c0a836116aa565b90506000610c20610c1b8584611a7b565b61214f565b905080610c2c856122c2565b610c3686856122f3565b604051602001610c4893929190614b1a565b60405160208183030381529060405292505050919050565b6000818152600260205260408120546001600160a01b0316806104bf5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b60648201526084016105bf565b60006001600160a01b038216610d425760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b60648201526084016105bf565b506001600160a01b031660009081526003602052604090205490565b33610d67610d99565b6001600160a01b031614610d8d5760405162461bcd60e51b81526004016105bf906155da565b610d976000612405565b565b600a546001600160a01b031690565b6060600180546104d490615833565b6002600b541415610dda5760405162461bcd60e51b81526004016105bf90615697565b6002600b556000610dea60085490565b9050610d058110610e0d5760405162461bcd60e51b81526004016105bf906154e8565b6003821115610e2e5760405162461bcd60e51b81526004016105bf90615660565b668e1bc9bf040000341015610e555760405162461bcd60e51b81526004016105bf906155ae565b610e5f83836112fa565b1515600114610e805760405162461bcd60e51b81526004016105bf906156ce565b6000818152600c60205260409020610e99908484613725565b50610ea381611411565b6000828152600d6020526040902055610ebb8161148a565b50506001600b5550565b610ed0338383612457565b5050565b610ede3383611494565b610efa5760405162461bcd60e51b81526004016105bf9061560f565b610f0684848484612522565b50505050565b6060610f178261126f565b610f335760405162461bcd60e51b81526004016105bf90615562565b6000610f3e836116aa565b9050610f4a8382611a7b565b9392505050565b6060610f5c8261126f565b610f785760405162461bcd60e51b81526004016105bf90615562565b6000610f83836116aa565b90506000610f918483611a7b565b90506000610f9e8261214f565b9050610fdd81610fad876122c2565b610fb788876122f3565b604051602001610fc993929190614db9565b60405160208183030381529060405261214f565b604051602001610fed91906150b4565b6040516020818303038152906040529350505050919050565b60606110118261126f565b61102d5760405162461bcd60e51b81526004016105bf90615562565b6000611038836116aa565b90506000611049610c1b8584611a7b565b905080604051602001610c4891906150f9565b61106583610c60565b6001600160a01b0316336001600160a01b0316146110c55760405162461bcd60e51b815260206004820181905260248201527f4f6e6c79204e465420686f6c6465722063616e20757064617465436f6c6f727360448201526064016105bf565b60038111156110e65760405162461bcd60e51b81526004016105bf90615660565b6611c37937e0800034101561110d5760405162461bcd60e51b81526004016105bf906155ae565b61111782826112fa565b15156001146111385760405162461bcd60e51b81526004016105bf906156ce565b6000838152600c60205260409020610f06908383613725565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b33611188610d99565b6001600160a01b0316146111ae5760405162461bcd60e51b81526004016105bf906155da565b6001600160a01b0381166112135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105bf565b61121c81612405565b50565b60006001600160e01b031982166380ac58cd60e01b148061125057506001600160e01b03198216635b5e139f60e01b145b806104bf57506301ffc9a760e01b6001600160e01b03198316146104bf565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906112c182610c60565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000735fbdb2315678afecb367f032d93f642f64180aa3815b8381101561140657816001600160a01b0316636352211e86868481811061134a57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061135f9190613b14565b61ffff166040518263ffffffff1660e01b815260040161138191815260200190565b60206040518083038186803b15801561139957600080fd5b505afa1580156113ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d19190613895565b6001600160a01b0316336001600160a01b0316146113f4576000925050506104bf565b806113fe8161586e565b915050611313565b506001949350505050565b60008061141f83600161575a565b9050735fbdb2315678afecb367f032d93f642f64180aa361144081836157d1565b61144983612555565b42448460405160200161145f9493929190613f4d565b6040516020818303038152906040528051906020012060001c611482919061575a565b949350505050565b61121c338261266e565b600061149f8261126f565b6114bb5760405162461bcd60e51b81526004016105bf90615562565b60006114c683610c60565b9050806001600160a01b0316846001600160a01b031614806115015750836001600160a01b03166114f684610557565b6001600160a01b0316145b8061148257506114828185611151565b826001600160a01b031661152482610c60565b6001600160a01b03161461158c5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b60648201526084016105bf565b6001600160a01b0382166115ee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016105bf565b6115f9838383612688565b61160460008261128c565b6001600160a01b038316600090815260036020526040812080546001929061162d9084906157f0565b90915550506001600160a01b038216600090815260036020526040812080546001929061165b90849061575a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716916000805160206159cb83398151915291a4505050565b6116b26137d2565b6116ba6137d2565b6000838152600d602052604090819020548151600f808252610200820190935290918160200160208202803683375050506040838101919091528051600f808252610200820190925290602082016101e080368337505050606083015260408051600f808252610200820190925290602082016101e08036833750505060a083015260408051600f808252610200820190925290602082016101e080368337505050608083015260408051600f808252610200820190925290602082016101e08036833750505060c083015260408051600f808252610200820190925290602082016101e08036833701905050602083015260408051600f80825261020082019092529081602001602082028036833750505082526117e26103e86103ff60701b8316615889565b6117ed90600161575a565b61ffff1660e083015260005b600f811015611a72576118126101f46103ff8416615889565b61181d90600161575a565b8360400151828151811061184157634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101526101f461186860106303ff00008516615793565b6118729190615889565b61187d90600161575a565b836060015182815181106118a157634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091018201526097906118c7906101ff60201b8516615793565b6118d19190615889565b6118dc9060fa61575a565b8360a00151828151811061190057634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015261192660976101ff603085901c16615889565b6119319060fa61575a565b8360800151828151811061195557634e487b7160e01b600052603260045260246000fd5b61ffff9092166020928302919091019091015261016861197d60406101ff60401b8516615793565b6119879190615889565b61199290600161575a565b8360c0015182815181106119b657634e487b7160e01b600052603260045260246000fd5b61ffff909216602092830291909101909101526119dc60026101ff605085901c16615889565b83602001518281518110611a0057634e487b7160e01b600052603260045260246000fd5b60ff90921660209283029190910190910152611a2560036101ff606085901c16615889565b8351805183908110611a4757634e487b7160e01b600052603260045260246000fd5b60ff9092166020928302919091019091015260029190911c9080611a6a8161586e565b9150506117f9565b50909392505050565b60606000611a8884612740565b6040805160038082526080820190925291925060009190816020015b6060815260200190600190039081611aa45750506040805160038082526080820190925291925060009190602082015b6060815260200190600190039081611ad45750506040805160038082526080820190925291925060009190602082015b6060815260200190600190039081611b0457905050905060005b6003811015611c2957848181518110611b4757634e487b7160e01b600052603260045260246000fd5b6020026020010151848281518110611b6f57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250848181518110611b9a57634e487b7160e01b600052603260045260246000fd5b6020026020010151838281518110611bc257634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180604001604052806005815260200164776869746560d81b815250828281518110611c0b57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508080611c219061586e565b915050611b1e565b506103de8660e0015161ffff1610611e06576040518060400160405280600781526020016611a1a21ba3199960c91b81525083600081518110611c7c57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280600781526020016611a29aa29a229960c91b81525083600181518110611cc857634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001660466e646ac862760cb1b81525083600281518110611d1457634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180604001604052806005815260200164626c61636b60d81b81525082600081518110611d5e57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001660234330433043360cc1b81525082600181518110611daa57634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280600781526020016611a29aa29a229960c91b81525082600281518110611df657634e487b7160e01b600052603260045260246000fd5b60200260200101819052506120e3565b6103b68660e0015161ffff1610611fd257604051806040016040528060078152602001660236330633063360cc1b81525083600081518110611e5857634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280600781526020016611b29ab29a329960c91b81525083600181518110611ea457634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001660236330633063360cc1b81525083600281518110611ef057634e487b7160e01b600052603260045260246000fd5b602002602001018190525060405180604001604052806005815260200164776869746560d81b81525082600081518110611f3a57634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001660234330433043360cc1b81525082600181518110611f8657634e487b7160e01b600052603260045260246000fd5b60200260200101819052506040518060400160405280600781526020016611a1a21ba3199960c91b81525082600281518110611df657634e487b7160e01b600052603260045260246000fd5b6103528660e0015161ffff16106120e3578360008151811061200457634e487b7160e01b600052603260045260246000fd5b60200260200101518160008151811061202d57634e487b7160e01b600052603260045260246000fd5b60200260200101819052508360018151811061205957634e487b7160e01b600052603260045260246000fd5b60200260200101518160018151811061208257634e487b7160e01b600052603260045260246000fd5b6020026020010181905250836002815181106120ae57634e487b7160e01b600052603260045260246000fd5b6020026020010151816002815181106120d757634e487b7160e01b600052603260045260246000fd5b60200260200101819052505b60006120ef84886129fb565b905060006120fc84612d67565b9050600061210a868a612ee0565b9050600061211785613064565b90508383838360405160200161213094939291906141ec565b6040516020818303038152906040529850505050505050505092915050565b606081516000141561216f57505060408051602081019091526000815290565b600060405180606001604052806040815260200161596b604091399050600060038451600261219e919061575a565b6121a89190615793565b6121b39060046157d1565b905060006121c282602061575a565b6001600160401b038111156121e757634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612211576020820181803683370190505b509050818152600183018586518101602084015b8183101561227d576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825350600101612225565b60038951066001811461229757600281146122a8576122b4565b613d3d60f01b6001198301526122b4565b603d60f81b6000198301525b509398975050505050505050565b60606122cd82612555565b6040516020016122dd91906149f1565b6040516020818303038152906040529050919050565b606060006040518060400160405280600681526020016521b7b6b6b7b760d11b81525090506103de8360e0015161ffff161061234a575060408051808201909152600481526311dbdb1960e21b60208201526123ad565b6103b68360e0015161ffff161061237e575060408051808201909152600681526529b4b63b32b960d11b60208201526123ad565b6103528360e0015161ffff16106123ad5750604080518082019091526005815264111c9a599d60da1b60208201525b6000816123b986613139565b6040516020016123ca9291906153ed565b6040516020818303038152906040529050806040516020016123ec9190613cb8565b6040516020818303038152906040529250505092915050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156124b55760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016105bf565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61252d848484611511565b6125398484848461330a565b610f065760405162461bcd60e51b81526004016105bf90615510565b6060816125795750506040805180820190915260018152600360fc1b602082015290565b8160005b81156125a3578061258d8161586e565b915061259c9050600a83615793565b915061257d565b6000816001600160401b038111156125cb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156125f5576020820181803683370190505b5090505b84156114825761260a6001836157f0565b9150612617600a86615889565b61262290603061575a565b60f81b81838151811061264557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612667600a86615793565b94506125f9565b610ed082826040518060200160405280600081525061340c565b6001600160a01b0383166126e3576126de81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612706565b816001600160a01b0316836001600160a01b03161461270657612706838261343f565b6001600160a01b03821661271d576106f0816134dc565b826001600160a01b0316826001600160a01b0316146106f0576106f082826135b5565b6000818152600c602090815260408083208054825181850281018501909352808352606094938301828280156127bd57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116127845790505b5050506000868152600c602052604080822054815160038082526080820190935295965094919350909150816020015b60608152602001906001900390816127ed579050509050604051806040016040528060078152602001661199191919191960c91b8152508160008151811061284557634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001662337373737373760c81b8152508160018151811061289157634e487b7160e01b600052603260045260246000fd5b6020026020010181905250604051806040016040528060078152602001662341414141414160c81b815250816002815181106128dd57634e487b7160e01b600052603260045260246000fd5b602002602001018190525060005b828110156129f257735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b031663e01c8fa185838151811061293657634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff166040518263ffffffff1660e01b815260040161296091815260200190565b60006040518083038186803b15801561297857600080fd5b505afa15801561298c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129b49190810190613aa2565b8282815181106129d457634e487b7160e01b600052603260045260246000fd5b602002602001018190525080806129ea9061586e565b9150506128eb565b50949350505050565b6040805180820190915260168152751e33903334b63616b7b830b1b4ba3c9e91181719911f60511b60208201526060908160005b600f811015612d555784602001518181518110612a5c57634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1660001415612b74578585600001518281518110612a9457634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1681518110612abd57634e487b7160e01b600052603260045260246000fd5b6020026020010151612afd86604001518381518110612aec57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff16612555565b612b2487606001518481518110612aec57634e487b7160e01b600052603260045260246000fd5b612b4b8860a001518581518110612aec57634e487b7160e01b600052603260045260246000fd5b604051602001612b5e9493929190614cfe565b6040516020818303038152906040529150612d1e565b84602001518181518110612b9857634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1660011415612d1e578585600001518281518110612bd057634e487b7160e01b600052603260045260246000fd5b602002602001015160ff1681518110612bf957634e487b7160e01b600052603260045260246000fd5b6020026020010151612c45600287604001518481518110612c2a57634e487b7160e01b600052603260045260246000fd5b6020026020010151612c3c9190615772565b61ffff16612555565b612c6e600288606001518581518110612c2a57634e487b7160e01b600052603260045260246000fd5b612ca98860a001518581518110612c9557634e487b7160e01b600052603260045260246000fd5b60200260200101516002612c3c91906157a7565b612cd089608001518681518110612c9557634e487b7160e01b600052603260045260246000fd5b612cf78a60c001518781518110612aec57634e487b7160e01b600052603260045260246000fd5b604051602001612d0c96959493929190614be9565b60405160208183030381529060405291505b8282604051602001612d31929190613cd4565b60405160208183030381529060405292508080612d4d9061586e565b915050612a2f565b50816040516020016123ec9190613eea565b6060600082600081518110612d8c57634e487b7160e01b600052603260045260246000fd5b602002602001015183600181518110612db557634e487b7160e01b600052603260045260246000fd5b602002602001015184600081518110612dde57634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612df8939291906152b3565b60405160208183030381529060405290506000604051602001612e1a9061513d565b6040516020818303038152906040529050600084600281518110612e4e57634e487b7160e01b600052603260045260246000fd5b602002602001015185600081518110612e7757634e487b7160e01b600052603260045260246000fd5b602002602001015186600281518110612ea057634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612eba93929190613f7c565b6040516020818303038152906040529050828282604051602001610fed93929190613d03565b6060600083600081518110612f0557634e487b7160e01b600052603260045260246000fd5b602002602001015184600181518110612f2e57634e487b7160e01b600052603260045260246000fd5b602002602001015185600281518110612f5757634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612f7193929190614319565b60405160208183030381529060405290506103b68360e0015161ffff1610610f4a578084600081518110612fb557634e487b7160e01b600052603260045260246000fd5b602002602001015185600181518110612fde57634e487b7160e01b600052603260045260246000fd5b60200260200101518660028151811061300757634e487b7160e01b600052603260045260246000fd5b60200260200101518760008151811061303057634e487b7160e01b600052603260045260246000fd5b602002602001015160405160200161304c959493929190613d46565b60405160208183030381529060405290509392505050565b606060008260008151811061308957634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016130a19190614e5e565b60405160208183030381529060405290506000836001815181106130d557634e487b7160e01b600052603260045260246000fd5b60200260200101516040516020016130ed91906145da565b604051602081830303815290604052905060008460028151811061312157634e487b7160e01b600052603260045260246000fd5b6020026020010151604051602001612eba91906147bc565b6000818152600c602090815260408083208054825181850281018501909352808352606094938301828280156131b657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161317d5790505b5050506000868152600c60205260408120549394506060925090505b828110156129f2578381815181106131fa57634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff1660001415613213576129f2565b81735fbdb2315678afecb367f032d93f642f64180aa36001600160a01b031663e01c8fa186848151811061325757634e487b7160e01b600052603260045260246000fd5b602002602001015161ffff166040518263ffffffff1660e01b815260040161328191815260200190565b60006040518083038186803b15801561329957600080fd5b505afa1580156132ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526132d59190810190613aa2565b6040516020016132e6929190613f12565b604051602081830303815290604052915080806133029061586e565b9150506131d2565b60006001600160a01b0384163b1561140657604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061334e9033908990889088906004016154a2565b602060405180830381600087803b15801561336857600080fd5b505af1925050508015613398575060408051601f3d908101601f1916820190925261339591810190613a86565b60015b6133f2573d8080156133c6576040519150601f19603f3d011682016040523d82523d6000602084013e6133cb565b606091505b5080516133ea5760405162461bcd60e51b81526004016105bf90615510565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611482565b61341683836135f9565b613423600084848461330a565b6106f05760405162461bcd60e51b81526004016105bf90615510565b6000600161344c84610cd7565b61345691906157f0565b6000838152600760205260409020549091508082146134a9576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b6008546000906134ee906001906157f0565b6000838152600960205260408120546008805493945090928490811061352457634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050806008838154811061355357634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061359957634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b60006135c083610cd7565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b03821661364f5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016105bf565b6136588161126f565b156136a45760405162461bcd60e51b815260206004820152601c60248201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b60448201526064016105bf565b6136b060008383612688565b6001600160a01b03821660009081526003602052604081208054600192906136d990849061575a565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392906000805160206159cb833981519152908290a45050565b82805482825590600052602060002090600f016010900481019282156137c25791602002820160005b8382111561379257833561ffff1683826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030261374e565b80156137c05782816101000a81549061ffff0219169055600201602081600101049283019260010302613792565b505b506137ce92915061381b565b5090565b60405180610100016040528060608152602001606081526020016060815260200160608152602001606081526020016060815260200160608152602001600061ffff1681525090565b5b808211156137ce576000815560010161381c565b60008083601f840112613841578182fd5b5081356001600160401b03811115613857578182fd5b6020830191508360208260051b850101111561387257600080fd5b9250929050565b60006020828403121561388a578081fd5b8135610f4a816158df565b6000602082840312156138a6578081fd5b8151610f4a816158df565b600080604083850312156138c3578081fd5b82356138ce816158df565b915060208301356138de816158df565b809150509250929050565b6000806000606084860312156138fd578081fd5b8335613908816158df565b92506020840135613918816158df565b929592945050506040919091013590565b6000806000806080858703121561393e578081fd5b8435613949816158df565b93506020850135613959816158df565b92506040850135915060608501356001600160401b0381111561397a578182fd5b8501601f8101871361398a578182fd5b803561399d61399882615733565b615703565b8181528860208385010111156139b1578384fd5b81602084016020830137908101602001929092525092959194509250565b600080604083850312156139e1578182fd5b82356139ec816158df565b9150602083013580151581146138de578182fd5b60008060408385031215613a12578182fd5b8235613a1d816158df565b946020939093013593505050565b60008060208385031215613a3d578182fd5b82356001600160401b03811115613a52578283fd5b613a5e85828601613830565b90969095509350505050565b600060208284031215613a7b578081fd5b8135610f4a816158f4565b600060208284031215613a97578081fd5b8151610f4a816158f4565b600060208284031215613ab3578081fd5b81516001600160401b03811115613ac8578182fd5b8201601f81018413613ad8578182fd5b8051613ae661399882615733565b818152856020838501011115613afa578384fd5b613b0b826020830160208601615807565b95945050505050565b600060208284031215613b25578081fd5b813561ffff81168114610f4a578182fd5b600060208284031215613b47578081fd5b5035919050565b600080600060408486031215613b62578081fd5b8335925060208401356001600160401b03811115613b7e578182fd5b613b8a86828701613830565b9497909650939450505050565b60008151808452613baf816020860160208601615807565b601f01601f19169290920160200192915050565b60008151613bd5818560208601615807565b9290920192915050565b7f643d224d3139352e352032343863302033302033372e352033302035322e352081527f30732035322e352d33302035322e352030732d33372e352033302d35322e352060208201527f30732d35322e352d33302d35322e352030222066696c6c3d226e6f6e65223e006040820152605f0190565b7f3c616e696d617465206174747269627574654e616d653d2266696c6c222076618152716c7565733d227472616e73706172656e743b60701b602082015260320190565b603b60f81b815260010190565b661e17b830ba341f60c91b815260070190565b60008251613cca818460208701615807565b9190910192915050565b60008351613ce6818460208801615807565b835190830190613cfa818360208801615807565b01949350505050565b60008451613d15818460208901615807565b845190830190613d29818360208901615807565b8451910190613d3c818360208801615807565b0195945050505050565b60008651613d58818460208b01615807565b80830190507f3c616e696d61746520626567696e3d22702e626567696e3b712e626567696e3b81527f722e626567696e2220617474726962757465547970653d22584d4c222061747460208201527f7269627574654e616d653d227374726f6b652d646173686f666673657422206660408201527f726f6d3d22302220746f3d2232333022206475723d223173222066696c6c3d22606082015269333932b2bd329110179f60b11b60808201527f3c616e696d61746520626567696e3d22732e626567696e3b732e656e64222061608a8201527f7474726962757465547970653d22584d4c22206174747269627574654e616d6560aa820152711e9139ba3937b5b291103b30b63ab2b99e9160711b60ca8201528651613e7f8160dc840160208b01615807565b613edd613eb6613eb0613ea5613eaa613ea5613e9f60dc888a0101613c98565b8d613bc3565b613c98565b8a613bc3565b87613bc3565b7a1110323ab91e911b3991103334b6361e91333932b2bd329110179f60291b8152601b0190565b9998505050505050505050565b60008251613efc818460208701615807565b631e17b39f60e11b920191825250600401919050565b60008351613f24818460208801615807565b835190830190613f38818360208801615807565b600b60fa1b9101908152600101949350505050565b60008551613f5f818460208a01615807565b919091019384525060208301919091526040820152606001919050565b7f3c616e696d61746520626567696e3d22732e656e64222061747472696275746581527f547970653d22584d4c22206174747269627574654e616d653d227374726f6b6560208201526911103b30b63ab2b99e9160b11b604082015260008451613fed81604a850160208901615807565b8083019050603b60f81b80604a830152855161401081604b850160208a01615807565b604b920191820152835161402b81604c840160208801615807565b791110323ab91e911a3991103334b6361e91333932b2bd3291179f60311b9101604c8101919091527f3c616e696d6174652069643d22612220626567696e3d22732e626567696e3b7360668201527f2e626567696e2b31733b732e626567696e2b32733b732e626567696e2b33733b60868201527f732e626567696e2b34733b732e626567696e2b35733b732e626567696e2b367360a682015261011160f51b60c68201527f617474726962757465547970653d22584d4c22206174747269627574654e616d60c88201527f653d227374726f6b652d7769647468222076616c7565733d2231363b32303b3160e88201527b1b1110323ab91e9118b991103334b6361e91333932b2bd329110179f60211b6101088201526141e261012482017f3c616e696d6174652069643d22732220617474726962757465547970653d225881527f4d4c22206174747269627574654e616d653d227374726f6b652d646173686f6660208201527f667365742220626567696e3d2230733b732e656e642220746f3d20222d313830604082015279181110323ab91e911b39911010179f1e17b830ba341f1e17b39f60311b6060820152607a0190565b9695505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323081527f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e60208201527f77332e6f72672f313939392f786c696e6b222077696474683d2235303022206860408201527f65696768743d22353030222076696577626f783d22302030203530302035303060608201527f22207374796c653d226261636b67726f756e642d636f6c6f723a23313131313160808201526218911f60e91b60a0820152600085516142c88160a3850160208a01615807565b8551908301906142df8160a3840160208a01615807565b85519101906142f58160a3840160208901615807565b845191019061430b8160a3840160208801615807565b0160a3019695505050505050565b691e339034b21e9131111f60b11b81527f3c7061746820643d224d3134342e342038392e3331682d33312e33632d31362e600a8201527f38382033322e353720302037312e333820302037312e33386833312e33632d33602a8201527f302e39352d333520302d37312e333820302d37312e33385a6d2d31332e313720604a8201527f36332e3736682d31312e3635732d31322e34372d31372e333820302d35352e36606a8201527f386831312e3635732d32302e382032352e313820302035352e36385a22207472608a8201527f616e73666f726d3d226d61747269782832203020302032202d3935203029222060aa8201527f7374726f6b653d22626c61636b222066696c6c2d6f7061636974793d22302e3960ca82015261011160f51b60ea8201527f7374726f6b652d77696474683d222e3722207374726f6b652d6461736861727260ec8201527f61793d22323022207374726f6b652d646173686f66667365743d223130223e0061010c8201527f3c616e696d6174652069643d22702220626567696e3d22732e626567696e2b3261012b8201526000805160206159ab83398151915261014b82015265626c61636b3b60d01b61016b8201526000613b0b6145696145d4614588826145636145176144f96101718a01613e9f565b711db13630b1b59110323ab91e91193991179f60711b815260120190565b7f3c616e696d6174652069643d22712220626567696e3d22732e626567696e2b3481526000805160206159ab833981519152602082015265626c61636b3b60d01b604082015260460190565b89613bc3565b721db13630b1b59110323ab91e9119399110179f60691b815260130190565b7f3c616e696d6174652069643d22722220626567696e3d22732e626567696e2b3681526000805160206159ab833981519152602082015265626c61636b3b60d01b604082015260460190565b85613bc3565b6501e3830ba34160d51b81527f643d224d203130372e33313739203131372e3534353763202d31332e3339383560068201527f2032352e3835323420302035362e36353820302035362e363538206820362e3860268201527f37332063202d302e31353335202d302e34303637202d392e37373234202d323660468201527701718989c1a10171819981a90169a9b17191b1a1c103d11160451b60668201527f7472616e73666f726d3d227472616e736c617465282d38382c36302920736361607e8201527f6c6528312e332c312e332922207374726f6b652d6f7061636974793d222e3335609e8201527f222066696c6c2d6f7061636974793d222e35222066696c6c3d227472616e737060be8201526630b932b73a111f60c91b60de820152600061470960e58301613c54565b8351614719818360208801615807565b7f3b7472616e73706172656e742220626567696e3d22772e626567696e2b2e327391019081526b1110323ab91e9118b991179f60a11b602082015260008051602061592b833981519152602c8201526000805160206159eb833981519152604c8201527f6172656e742220626567696e3d22772e626567696e2b2e327322206475723d22606c8201526418b991179f60d91b608c82015261148260918201613ca5565b6501e3830ba34160d51b81527f643d224d3130372e33313739203131372e3534353720632d31332e333938352060068201527f32352e3835323420302035362e36353820302035362e3635382068362e38373360268201527f20632d302e313533352d302e343036372d392e373732342d32362e313138342060468201526f0171819981a969a9b17191b1a1c3d11160851b60668201527f7472616e73666f726d3d227472616e736c617465282d38322c3130342920736360768201527f616c6528312c312922207374726f6b652d6f7061636974793d222e303522206660968201527f696c6c2d6f7061636974793d22302e33222066696c6c3d227472616e7370617260b68201526432b73a111f60d91b60d682015260006148e160db8301613c54565b83516148f1818360208801615807565b7f3b7472616e73706172656e742220626567696e3d22772e626567696e2b2e347391019081526b1110323ab91e9118b991179f60a11b602082015260008051602061592b833981519152602c8201526000805160206159eb833981519152604c8201527f6172656e742220626567696e3d22772e626567696e2b2e347322206475723d22606c8201526418b991179f60d91b608c8201527f3c2f706174683e3c2f673e3c75736520687265663d2223622220783d222d353060918201527f302220793d222d35303022207472616e73666f726d3d22726f7461746528313860b18201526a181491179f1e17b9bb339f60a91b60d182015260dc8101611482565b7f2265787465726e616c5f75726c223a2268747470733a2f2f73796e6378636f6c8152681bdc9ccb9e1e5e888b60ba1b60208201527f226465736372697074696f6e223a225468652053594e4378436f6c6f7273206160298201527f72652067656e65726174656420616e642073746f72656420656e746972656c7960498201527f206f6e2d636861696e2c20616e64206d6179206265206c696e6b65642077697460698201527f6820757020746f20332054484520434f4c4f5253207072696d6974697665732060898201526f3337b91032b834b19032b33332b1ba1760811b60a98201526c5c6e546f6b656e2069643a202360981b60b982015260008251614b028160c6850160208701615807565b601160f91b60c693909101928301525060c701919050565b743230ba309d30b8383634b1b0ba34b7b717b539b7b760591b8152607b60f81b6015820152681134b6b0b3b2911d1160b91b60168201527919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b601f8201528351600090614b8a816039850160208901615807565b61088b60f21b6039918401918201528451614bac81603b840160208901615807565b600b60fa1b603b92909101918201528351614bce81603c840160208801615807565b607d60f81b603c9290910191820152603d0195945050505050565b6b1e3932b1ba103334b6361e9160a11b81528651600090614c1181600c850160208c01615807565b6411103c1e9160d91b600c918401918201528751614c36816011840160208c01615807565b6411103c9e9160d91b601192909101918201528651614c5c816016840160208b01615807565b6811103bb4b23a341e9160b91b601692909101918201528551614c8681601f840160208a01615807565b6911103432b4b3b43a1e9160b11b601f92909101918201528451614cb1816029840160208901615807565b614cf0614ce0613eb06029848601017304440e8e4c2dce6ccdee4da7a44e4dee8c2e8ca560631b815260140190565b631491179f60e11b815260040190565b9a9950505050505050505050565b6d1e31b4b931b632903334b6361e9160911b81528451600090614d2881600e850160208a01615807565b65111031bc1e9160d11b600e918401918201528551614d4e816014840160208a01615807565b65111031bc9e9160d11b601492909101918201528451614d7581601a840160208901615807565b641110391e9160d91b601a92909101918201528351614d9b81601f840160208801615807565b6211179f60e91b601f92909101918201526022019695505050505050565b607b60f81b8152681134b6b0b3b2911d1160b91b60018201527919185d184e9a5b5859d94bdcdd99cade1b5b0ed8985cd94d8d0b60321b600a8201528351600090614e0b816024850160208901615807565b61088b60f21b6024918401918201528451614e2d816026840160208901615807565b8451910190614e43816026840160208801615807565b607d60f81b6026929091019182015260270195945050505050565b7f3c2f706174683e3c7061746820643d224d3130372e33313739203131372e353481527f3537632d31332e333938352032352e3835323420302035362e3635382030203560208201527f362e363538206820362e383733632d302e313533352d302e343036372d392e3760408201527b01b991a16991b1718989c1a10171819981a969a9b17191b1a1c3d11160251b60608201527f7472616e73666f726d3d227472616e736c617465282d38352c31352920736361607c8201527f6c6528312e362c312e362922207374726f6b652d6f7061636974793d222e3722609c8201527f2066696c6c2d6f7061636974793d222e37222066696c6c3d227472616e73706160bc8201527f72656e74223e3c616e696d6174652069643d227722206174747269627574654e60dc8201527f616d653d2266696c6c222076616c7565733d227472616e73706172656e743b0060fc820152600061011b8351614fc78183860160208801615807565b7f3b7472616e73706172656e742220626567696e3d22702e626567696e2b2e3473908401828101919091527f3b712e626567696e2b2e34733b722e626567696e2b2e347322206475723d223161013b820152633991179f60e11b61015b8201527f3c616e696d61746520626567696e3d22772e626567696e22206174747269627561015f8201527f74654e616d653d227374726f6b65222076616c7565733d227472616e7370617261017f8201527f656e743b626c61636b3b7472616e73706172656e7422206475723d223173222f61019f820152601f60f91b6101bf820152613b0b6101c08201613ca5565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516150ec81601d850160208701615807565b91909101601d0192915050565b7b19185d184e985c1c1b1a58d85d1a5bdb8bda9cdbdb8ed8985cd94d8d60221b81526000825161513081601c850160208701615807565b91909101601c0192915050565b60008051602061590b833981519152815260008051602061594b833981519152602082018190527f6b652d646173686172726179222076616c7565733d22303b35303b3022206475604083015275391e911b3991103334b6361e91333932b2bd3291179f60511b60608301527f3c616e696d61746520626567696e3d22612e626567696e222061747472696275607683015260968201527f6b652d7769647468222076616c7565733d2231363b32303b313622206475723d60b6820152731118b991103334b6361e91333932b2bd3291179f60611b60d68201527f3c2f706174683e3c706174682069643d22696e66696e6974795f32222073747260ea8201527f6f6b652d6461736861727261793d2233303022207374726f6b652d646173686f61010a8201527f66667365743d2233303022207374726f6b653d2223464631313131222073747261012a8201526e037b5b296bbb4b23a341e91189b111608d1b61014a82015260006104bf6101598301613bdf565b7f3c672069643d22696e66696e6974795f31223e3c706174682069643d22696e6681527f696e69747922207374726f6b652d6461736861727261793d223022207374726f60208201527f6b652d646173686f66667365743d223022207374726f6b652d77696474683d226040820152630189b11160e51b6060820152600061533d60648301613bdf565b60008051602061590b833981519152815260008051602061594b83398151915260208201526c35b29110103b30b63ab2b99e9160991b6040820152855161538b81604d840160208a01615807565b808201915050603b60f81b80604d83015285516153af81604e850160208a01615807565b604e9201918201526141e26153c7604f830186613bc3565b791110323ab91e911a3991103334b6361e91333932b2bd3291179f60311b8152601a0190565b6d2261747472696275746573223a5b60901b81527f7b2274726169745f74797065223a22526172697479222c2276616c7565223a22600e820152825160009061543d81602e850160208801615807565b62089f4b60ea1b602e918401918201527f7b2274726169745f74797065223a22436f6c6f7273222c2276616c7565223a2260318201528351615486816051840160208801615807565b62227d5d60e81b60519290910191820152605401949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906141e290830184613b97565b602081526000610f4a6020830184613b97565b6020808252600e908201526d4578636565647320737570706c7960901b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b602080825260129082015271496e73756666696369656e742066756e647360701b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601d908201527f2320434f4c4f525320746f6b656e496473206d757374206265203c3d33000000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252601b908201527a21a7a627a929903737ba1037bbb732b210313c9039b2b73232b91760291b604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561572b5761572b6158c9565b604052919050565b60006001600160401b0382111561574c5761574c6158c9565b50601f01601f191660200190565b6000821982111561576d5761576d61589d565b500190565b600061ffff80841680615787576157876158b3565b92169190910492915050565b6000826157a2576157a26158b3565b500490565b600061ffff808316818516818304811182151516156157c8576157c861589d565b02949350505050565b60008160001904831182151516156157eb576157eb61589d565b500290565b6000828210156158025761580261589d565b500390565b60005b8381101561582257818101518382015260200161580a565b83811115610f065750506000910152565b600181811c9082168061584757607f821691505b6020821081141561586857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156158825761588261589d565b5060010190565b600082615898576158986158b3565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461121c57600080fd5b6001600160e01b03198116811461121c57600080fdfe3c616e696d61746520626567696e3d22732e626567696e2220617474726962753c616e696d617465206174747269627574654e616d653d227374726f6b6522207465547970653d22584d4c22206174747269627574654e616d653d227374726f4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f7322206174747269627574654e616d653d2266696c6c222076616c7565733d22ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef76616c7565733d227472616e73706172656e743b626c61636b3b7472616e7370a264697066735822122086086993968ed1b2803afa8e8f4ae6c1fc129e2d5c7727c444563b1d6e012e0164736f6c63430008040033",
  "devdoc": {
    "details": "Extends ERC721 Non-Fungible Token Standard basic implementation",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Sync x Colors contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mint(uint16[])": {
        "notice": "Mint one SYNCxCOLOR NFT"
      },
      "mintMany(uint256,uint16[])": {
        "notice": "Mint multiple SYNCxCOLOR NFTs"
      },
      "updateColors(uint256,uint16[])": {
        "notice": "Store mapping between tokenId and applied tokenIdColors"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 262,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 264,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 268,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 272,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 276,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 282,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1216,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1220,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1223,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1227,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 207,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2372,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_colorTokenIds",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_uint16)dyn_storage)"
      },
      {
        "astId": 2376,
        "contract": "contracts/SyncXColors.sol:Sync",
        "label": "_seed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint16)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint16)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}